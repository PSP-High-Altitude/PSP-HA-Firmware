
Telemetry_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004274  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080043ac  080043ac  000143ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004490  08004490  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004490  08004490  00014490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004498  08004498  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004498  08004498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800449c  0800449c  0001449c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000000c  080044ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  080044ac  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY
 13 .debug_info   000167a9  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002efb  00000000  00000000  00036822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001888  00000000  00000000  00039720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012f6  00000000  00000000  0003afa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002a8f  00000000  00000000  0003c29e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000172a3  00000000  00000000  0003ed2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad2d6  00000000  00000000  00055fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000068a0  00000000  00000000  001032a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00109b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08004394 	.word	0x08004394

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08004394 	.word	0x08004394

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b970 	b.w	8000470 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	460f      	mov	r7, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14a      	bne.n	800024e <__udivmoddi4+0xa6>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d965      	bls.n	800028a <__udivmoddi4+0xe2>
 80001be:	fab2 f382 	clz	r3, r2
 80001c2:	b143      	cbz	r3, 80001d6 <__udivmoddi4+0x2e>
 80001c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80001c8:	f1c3 0220 	rsb	r2, r3, #32
 80001cc:	409f      	lsls	r7, r3
 80001ce:	fa20 f202 	lsr.w	r2, r0, r2
 80001d2:	4317      	orrs	r7, r2
 80001d4:	409c      	lsls	r4, r3
 80001d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001da:	fa1f f58c 	uxth.w	r5, ip
 80001de:	fbb7 f1fe 	udiv	r1, r7, lr
 80001e2:	0c22      	lsrs	r2, r4, #16
 80001e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80001e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001ec:	fb01 f005 	mul.w	r0, r1, r5
 80001f0:	4290      	cmp	r0, r2
 80001f2:	d90a      	bls.n	800020a <__udivmoddi4+0x62>
 80001f4:	eb1c 0202 	adds.w	r2, ip, r2
 80001f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80001fc:	f080 811b 	bcs.w	8000436 <__udivmoddi4+0x28e>
 8000200:	4290      	cmp	r0, r2
 8000202:	f240 8118 	bls.w	8000436 <__udivmoddi4+0x28e>
 8000206:	3902      	subs	r1, #2
 8000208:	4462      	add	r2, ip
 800020a:	1a12      	subs	r2, r2, r0
 800020c:	b2a4      	uxth	r4, r4
 800020e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000212:	fb0e 2210 	mls	r2, lr, r0, r2
 8000216:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021a:	fb00 f505 	mul.w	r5, r0, r5
 800021e:	42a5      	cmp	r5, r4
 8000220:	d90a      	bls.n	8000238 <__udivmoddi4+0x90>
 8000222:	eb1c 0404 	adds.w	r4, ip, r4
 8000226:	f100 32ff 	add.w	r2, r0, #4294967295
 800022a:	f080 8106 	bcs.w	800043a <__udivmoddi4+0x292>
 800022e:	42a5      	cmp	r5, r4
 8000230:	f240 8103 	bls.w	800043a <__udivmoddi4+0x292>
 8000234:	4464      	add	r4, ip
 8000236:	3802      	subs	r0, #2
 8000238:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023c:	1b64      	subs	r4, r4, r5
 800023e:	2100      	movs	r1, #0
 8000240:	b11e      	cbz	r6, 800024a <__udivmoddi4+0xa2>
 8000242:	40dc      	lsrs	r4, r3
 8000244:	2300      	movs	r3, #0
 8000246:	e9c6 4300 	strd	r4, r3, [r6]
 800024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024e:	428b      	cmp	r3, r1
 8000250:	d908      	bls.n	8000264 <__udivmoddi4+0xbc>
 8000252:	2e00      	cmp	r6, #0
 8000254:	f000 80ec 	beq.w	8000430 <__udivmoddi4+0x288>
 8000258:	2100      	movs	r1, #0
 800025a:	e9c6 0500 	strd	r0, r5, [r6]
 800025e:	4608      	mov	r0, r1
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	fab3 f183 	clz	r1, r3
 8000268:	2900      	cmp	r1, #0
 800026a:	d149      	bne.n	8000300 <__udivmoddi4+0x158>
 800026c:	42ab      	cmp	r3, r5
 800026e:	d302      	bcc.n	8000276 <__udivmoddi4+0xce>
 8000270:	4282      	cmp	r2, r0
 8000272:	f200 80f7 	bhi.w	8000464 <__udivmoddi4+0x2bc>
 8000276:	1a84      	subs	r4, r0, r2
 8000278:	eb65 0203 	sbc.w	r2, r5, r3
 800027c:	2001      	movs	r0, #1
 800027e:	4617      	mov	r7, r2
 8000280:	2e00      	cmp	r6, #0
 8000282:	d0e2      	beq.n	800024a <__udivmoddi4+0xa2>
 8000284:	e9c6 4700 	strd	r4, r7, [r6]
 8000288:	e7df      	b.n	800024a <__udivmoddi4+0xa2>
 800028a:	b902      	cbnz	r2, 800028e <__udivmoddi4+0xe6>
 800028c:	deff      	udf	#255	; 0xff
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	2b00      	cmp	r3, #0
 8000294:	f040 808f 	bne.w	80003b6 <__udivmoddi4+0x20e>
 8000298:	1a8a      	subs	r2, r1, r2
 800029a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029e:	fa1f fe8c 	uxth.w	lr, ip
 80002a2:	2101      	movs	r1, #1
 80002a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002a8:	fb07 2015 	mls	r0, r7, r5, r2
 80002ac:	0c22      	lsrs	r2, r4, #16
 80002ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b2:	fb0e f005 	mul.w	r0, lr, r5
 80002b6:	4290      	cmp	r0, r2
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0x124>
 80002ba:	eb1c 0202 	adds.w	r2, ip, r2
 80002be:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c2:	d202      	bcs.n	80002ca <__udivmoddi4+0x122>
 80002c4:	4290      	cmp	r0, r2
 80002c6:	f200 80ca 	bhi.w	800045e <__udivmoddi4+0x2b6>
 80002ca:	4645      	mov	r5, r8
 80002cc:	1a12      	subs	r2, r2, r0
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d4:	fb07 2210 	mls	r2, r7, r0, r2
 80002d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	d908      	bls.n	80002f6 <__udivmoddi4+0x14e>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ec:	d202      	bcs.n	80002f4 <__udivmoddi4+0x14c>
 80002ee:	45a6      	cmp	lr, r4
 80002f0:	f200 80ba 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002f4:	4610      	mov	r0, r2
 80002f6:	eba4 040e 	sub.w	r4, r4, lr
 80002fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80002fe:	e79f      	b.n	8000240 <__udivmoddi4+0x98>
 8000300:	f1c1 0720 	rsb	r7, r1, #32
 8000304:	408b      	lsls	r3, r1
 8000306:	fa22 fc07 	lsr.w	ip, r2, r7
 800030a:	ea4c 0c03 	orr.w	ip, ip, r3
 800030e:	fa05 f401 	lsl.w	r4, r5, r1
 8000312:	fa20 f307 	lsr.w	r3, r0, r7
 8000316:	40fd      	lsrs	r5, r7
 8000318:	4323      	orrs	r3, r4
 800031a:	fa00 f901 	lsl.w	r9, r0, r1
 800031e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	fbb5 f8f0 	udiv	r8, r5, r0
 800032a:	0c1c      	lsrs	r4, r3, #16
 800032c:	fb00 5518 	mls	r5, r0, r8, r5
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb08 f50e 	mul.w	r5, r8, lr
 8000338:	42a5      	cmp	r5, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	d90b      	bls.n	8000358 <__udivmoddi4+0x1b0>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f108 3aff 	add.w	sl, r8, #4294967295
 8000348:	f080 8087 	bcs.w	800045a <__udivmoddi4+0x2b2>
 800034c:	42a5      	cmp	r5, r4
 800034e:	f240 8084 	bls.w	800045a <__udivmoddi4+0x2b2>
 8000352:	f1a8 0802 	sub.w	r8, r8, #2
 8000356:	4464      	add	r4, ip
 8000358:	1b64      	subs	r4, r4, r5
 800035a:	b29d      	uxth	r5, r3
 800035c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000360:	fb00 4413 	mls	r4, r0, r3, r4
 8000364:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000368:	fb03 fe0e 	mul.w	lr, r3, lr
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x1da>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f103 30ff 	add.w	r0, r3, #4294967295
 8000378:	d26b      	bcs.n	8000452 <__udivmoddi4+0x2aa>
 800037a:	45a6      	cmp	lr, r4
 800037c:	d969      	bls.n	8000452 <__udivmoddi4+0x2aa>
 800037e:	3b02      	subs	r3, #2
 8000380:	4464      	add	r4, ip
 8000382:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000386:	fba0 8302 	umull	r8, r3, r0, r2
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	429c      	cmp	r4, r3
 8000390:	46c6      	mov	lr, r8
 8000392:	461d      	mov	r5, r3
 8000394:	d355      	bcc.n	8000442 <__udivmoddi4+0x29a>
 8000396:	d052      	beq.n	800043e <__udivmoddi4+0x296>
 8000398:	b156      	cbz	r6, 80003b0 <__udivmoddi4+0x208>
 800039a:	ebb9 030e 	subs.w	r3, r9, lr
 800039e:	eb64 0405 	sbc.w	r4, r4, r5
 80003a2:	fa04 f707 	lsl.w	r7, r4, r7
 80003a6:	40cb      	lsrs	r3, r1
 80003a8:	40cc      	lsrs	r4, r1
 80003aa:	431f      	orrs	r7, r3
 80003ac:	e9c6 7400 	strd	r7, r4, [r6]
 80003b0:	2100      	movs	r1, #0
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	f1c3 0120 	rsb	r1, r3, #32
 80003ba:	fa02 fc03 	lsl.w	ip, r2, r3
 80003be:	fa20 f201 	lsr.w	r2, r0, r1
 80003c2:	fa25 f101 	lsr.w	r1, r5, r1
 80003c6:	409d      	lsls	r5, r3
 80003c8:	432a      	orrs	r2, r5
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d6:	fb07 1510 	mls	r5, r7, r0, r1
 80003da:	0c11      	lsrs	r1, r2, #16
 80003dc:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e0:	fb00 f50e 	mul.w	r5, r0, lr
 80003e4:	428d      	cmp	r5, r1
 80003e6:	fa04 f403 	lsl.w	r4, r4, r3
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x256>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f4:	d22f      	bcs.n	8000456 <__udivmoddi4+0x2ae>
 80003f6:	428d      	cmp	r5, r1
 80003f8:	d92d      	bls.n	8000456 <__udivmoddi4+0x2ae>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	1b49      	subs	r1, r1, r5
 8000400:	b292      	uxth	r2, r2
 8000402:	fbb1 f5f7 	udiv	r5, r1, r7
 8000406:	fb07 1115 	mls	r1, r7, r5, r1
 800040a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800040e:	fb05 f10e 	mul.w	r1, r5, lr
 8000412:	4291      	cmp	r1, r2
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x280>
 8000416:	eb1c 0202 	adds.w	r2, ip, r2
 800041a:	f105 38ff 	add.w	r8, r5, #4294967295
 800041e:	d216      	bcs.n	800044e <__udivmoddi4+0x2a6>
 8000420:	4291      	cmp	r1, r2
 8000422:	d914      	bls.n	800044e <__udivmoddi4+0x2a6>
 8000424:	3d02      	subs	r5, #2
 8000426:	4462      	add	r2, ip
 8000428:	1a52      	subs	r2, r2, r1
 800042a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800042e:	e739      	b.n	80002a4 <__udivmoddi4+0xfc>
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e709      	b.n	800024a <__udivmoddi4+0xa2>
 8000436:	4639      	mov	r1, r7
 8000438:	e6e7      	b.n	800020a <__udivmoddi4+0x62>
 800043a:	4610      	mov	r0, r2
 800043c:	e6fc      	b.n	8000238 <__udivmoddi4+0x90>
 800043e:	45c1      	cmp	r9, r8
 8000440:	d2aa      	bcs.n	8000398 <__udivmoddi4+0x1f0>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb63 050c 	sbc.w	r5, r3, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7a4      	b.n	8000398 <__udivmoddi4+0x1f0>
 800044e:	4645      	mov	r5, r8
 8000450:	e7ea      	b.n	8000428 <__udivmoddi4+0x280>
 8000452:	4603      	mov	r3, r0
 8000454:	e795      	b.n	8000382 <__udivmoddi4+0x1da>
 8000456:	4640      	mov	r0, r8
 8000458:	e7d1      	b.n	80003fe <__udivmoddi4+0x256>
 800045a:	46d0      	mov	r8, sl
 800045c:	e77c      	b.n	8000358 <__udivmoddi4+0x1b0>
 800045e:	3d02      	subs	r5, #2
 8000460:	4462      	add	r2, ip
 8000462:	e733      	b.n	80002cc <__udivmoddi4+0x124>
 8000464:	4608      	mov	r0, r1
 8000466:	e70b      	b.n	8000280 <__udivmoddi4+0xd8>
 8000468:	4464      	add	r4, ip
 800046a:	3802      	subs	r0, #2
 800046c:	e743      	b.n	80002f6 <__udivmoddi4+0x14e>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800047c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000480:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4313      	orrs	r3, r2
 800048a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4013      	ands	r3, r2
 8000496:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000498:	68fb      	ldr	r3, [r7, #12]
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr

080004a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c8:	68fb      	ldr	r3, [r7, #12]
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fc2a 	bl	8000d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f80e 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f9c2 	bl	8000868 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e4:	f000 f9a6 	bl	8000834 <MX_DMA_Init>
  MX_TIM1_Init();
 80004e8:	f000 f868 	bl	80005bc <MX_TIM1_Init>
  MX_TIM2_Init();
 80004ec:	f000 f8ba 	bl	8000664 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f954 	bl	800079c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 f906 	bl	8000704 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <main+0x24>
	...

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b09a      	sub	sp, #104	; 0x68
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2248      	movs	r2, #72	; 0x48
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f003 ff16 	bl	800433c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 0308 	add.w	r3, r7, #8
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
 8000520:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000522:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <SystemClock_Config+0xbc>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800052a:	4a23      	ldr	r2, [pc, #140]	; (80005b8 <SystemClock_Config+0xbc>)
 800052c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000530:	6013      	str	r3, [r2, #0]
 8000532:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <SystemClock_Config+0xbc>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800053e:	2301      	movs	r3, #1
 8000540:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8000542:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000546:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054c:	2302      	movs	r3, #2
 800054e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000550:	2303      	movs	r3, #3
 8000552:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000554:	2310      	movs	r3, #16
 8000556:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 8000558:	2306      	movs	r3, #6
 800055a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800055c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000560:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000562:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000566:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000568:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800056c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fb42 	bl	8001bfc <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800057e:	f000 f980 	bl	8000882 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000582:	234f      	movs	r3, #79	; 0x4f
 8000584:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	2303      	movs	r3, #3
 8000588:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800059a:	f107 0308 	add.w	r3, r7, #8
 800059e:	2102      	movs	r1, #2
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fead 	bl	8002300 <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005ac:	f000 f969 	bl	8000882 <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3768      	adds	r7, #104	; 0x68
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	58000400 	.word	0x58000400

080005bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c2:	f107 0310 	add.w	r3, r7, #16
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005da:	4b20      	ldr	r3, [pc, #128]	; (800065c <MX_TIM1_Init+0xa0>)
 80005dc:	4a20      	ldr	r2, [pc, #128]	; (8000660 <MX_TIM1_Init+0xa4>)
 80005de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <MX_TIM1_Init+0xa0>)
 80005e2:	222f      	movs	r2, #47	; 0x2f
 80005e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <MX_TIM1_Init+0xa0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <MX_TIM1_Init+0xa0>)
 80005ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f4:	4b19      	ldr	r3, [pc, #100]	; (800065c <MX_TIM1_Init+0xa0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_TIM1_Init+0xa0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000600:	4b16      	ldr	r3, [pc, #88]	; (800065c <MX_TIM1_Init+0xa0>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000606:	4815      	ldr	r0, [pc, #84]	; (800065c <MX_TIM1_Init+0xa0>)
 8000608:	f002 fdaa 	bl	8003160 <HAL_TIM_Base_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000612:	f000 f936 	bl	8000882 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4619      	mov	r1, r3
 8000622:	480e      	ldr	r0, [pc, #56]	; (800065c <MX_TIM1_Init+0xa0>)
 8000624:	f002 fdf3 	bl	800320e <HAL_TIM_ConfigClockSource>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800062e:	f000 f928 	bl	8000882 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000632:	2320      	movs	r3, #32
 8000634:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	4619      	mov	r1, r3
 8000642:	4806      	ldr	r0, [pc, #24]	; (800065c <MX_TIM1_Init+0xa0>)
 8000644:	f003 f87e 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800064e:	f000 f918 	bl	8000882 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	3720      	adds	r7, #32
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000034 	.word	0x20000034
 8000660:	40012c00 	.word	0x40012c00

08000664 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_TIM2_Init+0x9c>)
 8000686:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800068a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800068c:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <MX_TIM2_Init+0x9c>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000692:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_TIM2_Init+0x9c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <MX_TIM2_Init+0x9c>)
 800069a:	f04f 32ff 	mov.w	r2, #4294967295
 800069e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_TIM2_Init+0x9c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_TIM2_Init+0x9c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006ac:	4814      	ldr	r0, [pc, #80]	; (8000700 <MX_TIM2_Init+0x9c>)
 80006ae:	f002 fd57 	bl	8003160 <HAL_TIM_Base_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80006b8:	f000 f8e3 	bl	8000882 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80006bc:	2307      	movs	r3, #7
 80006be:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4619      	mov	r1, r3
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <MX_TIM2_Init+0x9c>)
 80006cc:	f002 fe68 	bl	80033a0 <HAL_TIM_SlaveConfigSynchro>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80006d6:	f000 f8d4 	bl	8000882 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006da:	2300      	movs	r3, #0
 80006dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006e2:	463b      	mov	r3, r7
 80006e4:	4619      	mov	r1, r3
 80006e6:	4806      	ldr	r0, [pc, #24]	; (8000700 <MX_TIM2_Init+0x9c>)
 80006e8:	f003 f82c 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80006f2:	f000 f8c6 	bl	8000882 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	3720      	adds	r7, #32
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000080 	.word	0x20000080

08000704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <MX_USART1_UART_Init+0x90>)
 800070a:	4a23      	ldr	r2, [pc, #140]	; (8000798 <MX_USART1_UART_Init+0x94>)
 800070c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_USART1_UART_Init+0x90>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_USART1_UART_Init+0x90>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_USART1_UART_Init+0x90>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_USART1_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_USART1_UART_Init+0x90>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_USART1_UART_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_USART1_UART_Init+0x90>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_USART1_UART_Init+0x90>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_USART1_UART_Init+0x90>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_USART1_UART_Init+0x90>)
 8000748:	2200      	movs	r2, #0
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074c:	4811      	ldr	r0, [pc, #68]	; (8000794 <MX_USART1_UART_Init+0x90>)
 800074e:	f003 f878 	bl	8003842 <HAL_UART_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000758:	f000 f893 	bl	8000882 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075c:	2100      	movs	r1, #0
 800075e:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_USART1_UART_Init+0x90>)
 8000760:	f003 fd23 	bl	80041aa <HAL_UARTEx_SetTxFifoThreshold>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800076a:	f000 f88a 	bl	8000882 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076e:	2100      	movs	r1, #0
 8000770:	4808      	ldr	r0, [pc, #32]	; (8000794 <MX_USART1_UART_Init+0x90>)
 8000772:	f003 fd58 	bl	8004226 <HAL_UARTEx_SetRxFifoThreshold>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800077c:	f000 f881 	bl	8000882 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_USART1_UART_Init+0x90>)
 8000782:	f003 fcda 	bl	800413a <HAL_UARTEx_DisableFifoMode>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800078c:	f000 f879 	bl	8000882 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000cc 	.word	0x200000cc
 8000798:	40013800 	.word	0x40013800

0800079c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <MX_USART2_UART_Init+0x90>)
 80007a2:	4a23      	ldr	r2, [pc, #140]	; (8000830 <MX_USART2_UART_Init+0x94>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_USART2_UART_Init+0x90>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_USART2_UART_Init+0x90>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_USART2_UART_Init+0x90>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_USART2_UART_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_USART2_UART_Init+0x90>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_USART2_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_USART2_UART_Init+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_USART2_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USART2_UART_Init+0x90>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_USART2_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e4:	4811      	ldr	r0, [pc, #68]	; (800082c <MX_USART2_UART_Init+0x90>)
 80007e6:	f003 f82c 	bl	8003842 <HAL_UART_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007f0:	f000 f847 	bl	8000882 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f4:	2100      	movs	r1, #0
 80007f6:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_USART2_UART_Init+0x90>)
 80007f8:	f003 fcd7 	bl	80041aa <HAL_UARTEx_SetTxFifoThreshold>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000802:	f000 f83e 	bl	8000882 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000806:	2100      	movs	r1, #0
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <MX_USART2_UART_Init+0x90>)
 800080a:	f003 fd0c 	bl	8004226 <HAL_UARTEx_SetRxFifoThreshold>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000814:	f000 f835 	bl	8000882 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_USART2_UART_Init+0x90>)
 800081a:	f003 fc8e 	bl	800413a <HAL_UARTEx_DisableFifoMode>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000824:	f000 f82d 	bl	8000882 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000160 	.word	0x20000160
 8000830:	40004400 	.word	0x40004400

08000834 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000838:	2004      	movs	r0, #4
 800083a:	f7ff fe1b 	bl	8000474 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff fe18 	bl	8000474 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	200b      	movs	r0, #11
 800084a:	f000 fbbe 	bl	8000fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800084e:	200b      	movs	r0, #11
 8000850:	f000 fbd5 	bl	8000ffe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	200c      	movs	r0, #12
 800085a:	f000 fbb6 	bl	8000fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800085e:	200c      	movs	r0, #12
 8000860:	f000 fbcd 	bl	8000ffe <HAL_NVIC_EnableIRQ>

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086c:	2002      	movs	r0, #2
 800086e:	f7ff fe19 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2001      	movs	r0, #1
 8000874:	f7ff fe16 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000878:	2004      	movs	r0, #4
 800087a:	f7ff fe13 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}

08000882 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000886:	b672      	cpsid	i
}
 8000888:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088a:	e7fe      	b.n	800088a <Error_Handler+0x8>

0800088c <LL_AHB2_GRP1_EnableClock>:
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000898:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800089a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008b0:	68fb      	ldr	r3, [r7, #12]
}
 80008b2:	bf00      	nop
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008e0:	68fb      	ldr	r3, [r7, #12]
}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4313      	orrs	r3, r2
 8000902:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000908:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4013      	ands	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000910:	68fb      	ldr	r3, [r7, #12]
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a09      	ldr	r2, [pc, #36]	; (800095c <HAL_TIM_Base_MspInit+0x34>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d104      	bne.n	8000944 <HAL_TIM_Base_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800093a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800093e:	f7ff ffd5 	bl	80008ec <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000942:	e007      	b.n	8000954 <HAL_TIM_Base_MspInit+0x2c>
  else if(htim_base->Instance==TIM2)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800094c:	d102      	bne.n	8000954 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff ffb4 	bl	80008bc <LL_APB1_GRP1_EnableClock>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40012c00 	.word	0x40012c00

08000960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b096      	sub	sp, #88	; 0x58
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	2238      	movs	r2, #56	; 0x38
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f003 fcdb 	bl	800433c <memset>
  if(huart->Instance==USART1)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a57      	ldr	r2, [pc, #348]	; (8000ae8 <HAL_UART_MspInit+0x188>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d17b      	bne.n	8000a88 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000990:	2301      	movs	r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000994:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000998:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 f850 	bl	8002a44 <HAL_RCCEx_PeriphCLKConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009aa:	f7ff ff6a 	bl	8000882 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009b2:	f7ff ff9b 	bl	80008ec <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2002      	movs	r0, #2
 80009b8:	f7ff ff68 	bl	800088c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009bc:	23c0      	movs	r3, #192	; 0xc0
 80009be:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009cc:	2307      	movs	r3, #7
 80009ce:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009d4:	4619      	mov	r1, r3
 80009d6:	4845      	ldr	r0, [pc, #276]	; (8000aec <HAL_UART_MspInit+0x18c>)
 80009d8:	f000 fd06 	bl	80013e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80009dc:	4b44      	ldr	r3, [pc, #272]	; (8000af0 <HAL_UART_MspInit+0x190>)
 80009de:	4a45      	ldr	r2, [pc, #276]	; (8000af4 <HAL_UART_MspInit+0x194>)
 80009e0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80009e2:	4b43      	ldr	r3, [pc, #268]	; (8000af0 <HAL_UART_MspInit+0x190>)
 80009e4:	2211      	movs	r2, #17
 80009e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009e8:	4b41      	ldr	r3, [pc, #260]	; (8000af0 <HAL_UART_MspInit+0x190>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ee:	4b40      	ldr	r3, [pc, #256]	; (8000af0 <HAL_UART_MspInit+0x190>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009f4:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <HAL_UART_MspInit+0x190>)
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009fa:	4b3d      	ldr	r3, [pc, #244]	; (8000af0 <HAL_UART_MspInit+0x190>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a00:	4b3b      	ldr	r3, [pc, #236]	; (8000af0 <HAL_UART_MspInit+0x190>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000a06:	4b3a      	ldr	r3, [pc, #232]	; (8000af0 <HAL_UART_MspInit+0x190>)
 8000a08:	2220      	movs	r2, #32
 8000a0a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a0c:	4b38      	ldr	r3, [pc, #224]	; (8000af0 <HAL_UART_MspInit+0x190>)
 8000a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a14:	4836      	ldr	r0, [pc, #216]	; (8000af0 <HAL_UART_MspInit+0x190>)
 8000a16:	f000 fb0d 	bl	8001034 <HAL_DMA_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000a20:	f7ff ff2f 	bl	8000882 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a32      	ldr	r2, [pc, #200]	; (8000af0 <HAL_UART_MspInit+0x190>)
 8000a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000a2c:	4a30      	ldr	r2, [pc, #192]	; (8000af0 <HAL_UART_MspInit+0x190>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <HAL_UART_MspInit+0x198>)
 8000a34:	4a31      	ldr	r2, [pc, #196]	; (8000afc <HAL_UART_MspInit+0x19c>)
 8000a36:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000a38:	4b2f      	ldr	r3, [pc, #188]	; (8000af8 <HAL_UART_MspInit+0x198>)
 8000a3a:	2212      	movs	r2, #18
 8000a3c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <HAL_UART_MspInit+0x198>)
 8000a40:	2210      	movs	r2, #16
 8000a42:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a44:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <HAL_UART_MspInit+0x198>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <HAL_UART_MspInit+0x198>)
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a50:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <HAL_UART_MspInit+0x198>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a56:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <HAL_UART_MspInit+0x198>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <HAL_UART_MspInit+0x198>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <HAL_UART_MspInit+0x198>)
 8000a64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a6a:	4823      	ldr	r0, [pc, #140]	; (8000af8 <HAL_UART_MspInit+0x198>)
 8000a6c:	f000 fae2 	bl	8001034 <HAL_DMA_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_UART_MspInit+0x11a>
    {
      Error_Handler();
 8000a76:	f7ff ff04 	bl	8000882 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a1e      	ldr	r2, [pc, #120]	; (8000af8 <HAL_UART_MspInit+0x198>)
 8000a7e:	67da      	str	r2, [r3, #124]	; 0x7c
 8000a80:	4a1d      	ldr	r2, [pc, #116]	; (8000af8 <HAL_UART_MspInit+0x198>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a86:	e02b      	b.n	8000ae0 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <HAL_UART_MspInit+0x1a0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d126      	bne.n	8000ae0 <HAL_UART_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a96:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000a9a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 ffcf 	bl	8002a44 <HAL_RCCEx_PeriphCLKConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_UART_MspInit+0x150>
      Error_Handler();
 8000aac:	f7ff fee9 	bl	8000882 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ab4:	f7ff ff02 	bl	80008bc <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff fee7 	bl	800088c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000abe:	230c      	movs	r3, #12
 8000ac0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ace:	2307      	movs	r3, #7
 8000ad0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000adc:	f000 fc84 	bl	80013e8 <HAL_GPIO_Init>
}
 8000ae0:	bf00      	nop
 8000ae2:	3758      	adds	r7, #88	; 0x58
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40013800 	.word	0x40013800
 8000aec:	48000400 	.word	0x48000400
 8000af0:	200001f4 	.word	0x200001f4
 8000af4:	40020008 	.word	0x40020008
 8000af8:	20000254 	.word	0x20000254
 8000afc:	4002001c 	.word	0x4002001c
 8000b00:	40004400 	.word	0x40004400

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b08:	e7fe      	b.n	8000b08 <NMI_Handler+0x4>

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler+0x4>

08000b16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr

08000b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr

08000b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4a:	f000 f94b 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <DMA1_Channel1_IRQHandler+0x10>)
 8000b5a:	f000 fb13 	bl	8001184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200001f4 	.word	0x200001f4

08000b68 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <DMA1_Channel2_IRQHandler+0x10>)
 8000b6e:	f000 fb09 	bl	8001184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000254 	.word	0x20000254

08000b7c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <SUBGHZ_Radio_IRQHandler+0x10>)
 8000b82:	f002 f970 	bl	8002e66 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000028 	.word	0x20000028

08000b90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ba0:	f7ff fff6 	bl	8000b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ba6:	490d      	ldr	r1, [pc, #52]	; (8000bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <LoopForever+0xe>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	; (8000be8 <LoopForever+0x16>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bca:	f003 fbbf 	bl	800434c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bce:	f7ff fc81 	bl	80004d4 <main>

08000bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd2:	e7fe      	b.n	8000bd2 <LoopForever>
  ldr   r0, =_estack
 8000bd4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000be0:	080044a0 	.word	0x080044a0
  ldr r2, =_sbss
 8000be4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000be8:	200002bc 	.word	0x200002bc

08000bec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC_IRQHandler>
	...

08000bf0 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	4798      	blx	r3
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200002b4 	.word	0x200002b4

08000c0c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2002      	movs	r0, #2
 8000c1a:	4798      	blx	r3
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200002b4 	.word	0x200002b4

08000c28 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2040      	movs	r0, #64	; 0x40
 8000c36:	4798      	blx	r3
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200002b4 	.word	0x200002b4

08000c44 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d002      	beq.n	8000c5c <HAL_SUBGHZ_CADStatusCallback+0x18>
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d005      	beq.n	8000c66 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8000c5a:	e00a      	b.n	8000c72 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2080      	movs	r0, #128	; 0x80
 8000c62:	4798      	blx	r3
            break;
 8000c64:	e005      	b.n	8000c72 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c6e:	4798      	blx	r3
            break;
 8000c70:	bf00      	nop
    }
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200002b4 	.word	0x200002b4

08000c80 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c90:	4798      	blx	r3
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200002b4 	.word	0x200002b4

08000ca0 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2020      	movs	r0, #32
 8000cae:	4798      	blx	r3
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200002b4 	.word	0x200002b4

08000cbc <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2004      	movs	r0, #4
 8000cca:	4798      	blx	r3
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200002b4 	.word	0x200002b4

08000cd8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2008      	movs	r0, #8
 8000ce6:	4798      	blx	r3
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	200002b4 	.word	0x200002b4

08000cf4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2010      	movs	r0, #16
 8000d02:	4798      	blx	r3
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200002b4 	.word	0x200002b4

08000d10 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d20:	4798      	blx	r3
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200002b4 	.word	0x200002b4

08000d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3a:	2003      	movs	r0, #3
 8000d3c:	f000 f93a 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000d40:	f001 fca2 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 8000d44:	4603      	mov	r3, r0
 8000d46:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <HAL_Init+0x3c>)
 8000d48:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f000 f810 	bl	8000d70 <HAL_InitTick>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d002      	beq.n	8000d5c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	71fb      	strb	r3, [r7, #7]
 8000d5a:	e001      	b.n	8000d60 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d5c:	f7ff fdde 	bl	800091c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d60:	79fb      	ldrb	r3, [r7, #7]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000000 	.word	0x20000000

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_InitTick+0x6c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d024      	beq.n	8000dce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d84:	f001 fc80 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_InitTick+0x6c>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d94:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 f93c 	bl	800101a <HAL_SYSTICK_Config>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d10f      	bne.n	8000dc8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b0f      	cmp	r3, #15
 8000dac:	d809      	bhi.n	8000dc2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dae:	2200      	movs	r2, #0
 8000db0:	6879      	ldr	r1, [r7, #4]
 8000db2:	f04f 30ff 	mov.w	r0, #4294967295
 8000db6:	f000 f908 	bl	8000fca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dba:	4a09      	ldr	r2, [pc, #36]	; (8000de0 <HAL_InitTick+0x70>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	e007      	b.n	8000dd2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	73fb      	strb	r3, [r7, #15]
 8000dc6:	e004      	b.n	8000dd2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	e001      	b.n	8000dd2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000004 	.word	0x20000004

08000de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_IncTick+0x1c>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <HAL_IncTick+0x20>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a03      	ldr	r2, [pc, #12]	; (8000e04 <HAL_IncTick+0x20>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	20000008 	.word	0x20000008
 8000e04:	200002b8 	.word	0x200002b8

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b02      	ldr	r3, [pc, #8]	; (8000e18 <HAL_GetTick+0x10>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	200002b8 	.word	0x200002b8

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4906      	ldr	r1, [pc, #24]	; (8000eb4 <__NVIC_EnableIRQ+0x34>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f80:	d301      	bcc.n	8000f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00f      	b.n	8000fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <SysTick_Config+0x40>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8e:	210f      	movs	r1, #15
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f7ff ff90 	bl	8000eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <SysTick_Config+0x40>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <SysTick_Config+0x40>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff2d 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd8:	f7ff ff44 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ff92 	bl	8000f0c <NVIC_EncodePriority>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff61 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff37 	bl	8000e80 <__NVIC_EnableIRQ>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffa4 	bl	8000f70 <SysTick_Config>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e08e      	b.n	8001164 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	4b47      	ldr	r3, [pc, #284]	; (800116c <HAL_DMA_Init+0x138>)
 800104e:	429a      	cmp	r2, r3
 8001050:	d80f      	bhi.n	8001072 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	4b45      	ldr	r3, [pc, #276]	; (8001170 <HAL_DMA_Init+0x13c>)
 800105a:	4413      	add	r3, r2
 800105c:	4a45      	ldr	r2, [pc, #276]	; (8001174 <HAL_DMA_Init+0x140>)
 800105e:	fba2 2303 	umull	r2, r3, r2, r3
 8001062:	091b      	lsrs	r3, r3, #4
 8001064:	009a      	lsls	r2, r3, #2
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a42      	ldr	r2, [pc, #264]	; (8001178 <HAL_DMA_Init+0x144>)
 800106e:	641a      	str	r2, [r3, #64]	; 0x40
 8001070:	e00e      	b.n	8001090 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	4b40      	ldr	r3, [pc, #256]	; (800117c <HAL_DMA_Init+0x148>)
 800107a:	4413      	add	r3, r2
 800107c:	4a3d      	ldr	r2, [pc, #244]	; (8001174 <HAL_DMA_Init+0x140>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	091b      	lsrs	r3, r3, #4
 8001084:	009a      	lsls	r2, r3, #2
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a3c      	ldr	r2, [pc, #240]	; (8001180 <HAL_DMA_Init+0x14c>)
 800108e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2202      	movs	r2, #2
 8001094:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	6812      	ldr	r2, [r2, #0]
 80010a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80010a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010aa:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6819      	ldr	r1, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	431a      	orrs	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	430a      	orrs	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 f914 	bl	8001310 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010f0:	d102      	bne.n	80010f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001100:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001104:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800110e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d010      	beq.n	800113a <HAL_DMA_Init+0x106>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b04      	cmp	r3, #4
 800111e:	d80c      	bhi.n	800113a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 f93d 	bl	80013a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	e008      	b.n	800114c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40020407 	.word	0x40020407
 8001170:	bffdfff8 	.word	0xbffdfff8
 8001174:	cccccccd 	.word	0xcccccccd
 8001178:	40020000 	.word	0x40020000
 800117c:	bffdfbf8 	.word	0xbffdfbf8
 8001180:	40020400 	.word	0x40020400

08001184 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a0:	f003 031c 	and.w	r3, r3, #28
 80011a4:	2204      	movs	r2, #4
 80011a6:	409a      	lsls	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d027      	beq.n	8001200 <HAL_DMA_IRQHandler+0x7c>
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d022      	beq.n	8001200 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0320 	and.w	r3, r3, #32
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d107      	bne.n	80011d8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0204 	bic.w	r2, r2, #4
 80011d6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011dc:	f003 021c 	and.w	r2, r3, #28
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	2104      	movs	r1, #4
 80011e6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ea:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 8081 	beq.w	80012f8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80011fe:	e07b      	b.n	80012f8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001204:	f003 031c 	and.w	r3, r3, #28
 8001208:	2202      	movs	r2, #2
 800120a:	409a      	lsls	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4013      	ands	r3, r2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d03d      	beq.n	8001290 <HAL_DMA_IRQHandler+0x10c>
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d038      	beq.n	8001290 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	2b00      	cmp	r3, #0
 800122a:	d10b      	bne.n	8001244 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 020a 	bic.w	r2, r2, #10
 800123a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <HAL_DMA_IRQHandler+0x180>)
 800124c:	429a      	cmp	r2, r3
 800124e:	d909      	bls.n	8001264 <HAL_DMA_IRQHandler+0xe0>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001254:	f003 031c 	and.w	r3, r3, #28
 8001258:	4a2b      	ldr	r2, [pc, #172]	; (8001308 <HAL_DMA_IRQHandler+0x184>)
 800125a:	2102      	movs	r1, #2
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	6053      	str	r3, [r2, #4]
 8001262:	e008      	b.n	8001276 <HAL_DMA_IRQHandler+0xf2>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	f003 031c 	and.w	r3, r3, #28
 800126c:	4a27      	ldr	r2, [pc, #156]	; (800130c <HAL_DMA_IRQHandler+0x188>)
 800126e:	2102      	movs	r1, #2
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001282:	2b00      	cmp	r3, #0
 8001284:	d038      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800128e:	e033      	b.n	80012f8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001294:	f003 031c 	and.w	r3, r3, #28
 8001298:	2208      	movs	r2, #8
 800129a:	409a      	lsls	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d02a      	beq.n	80012fa <HAL_DMA_IRQHandler+0x176>
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d025      	beq.n	80012fa <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 020e 	bic.w	r2, r2, #14
 80012bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f003 021c 	and.w	r2, r3, #28
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	2101      	movs	r1, #1
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d004      	beq.n	80012fa <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
}
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40020080 	.word	0x40020080
 8001308:	40020400 	.word	0x40020400
 800130c:	40020000 	.word	0x40020000

08001310 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8001320:	429a      	cmp	r2, r3
 8001322:	d813      	bhi.n	800134c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001330:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	3b08      	subs	r3, #8
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	091b      	lsrs	r3, r3, #4
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	e011      	b.n	8001370 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	009a      	lsls	r2, r3, #2
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8001356:	4413      	add	r3, r2
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	3b08      	subs	r3, #8
 8001364:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	3307      	adds	r3, #7
 800136e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001374:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f003 031f 	and.w	r3, r3, #31
 800137c:	2201      	movs	r2, #1
 800137e:	409a      	lsls	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40020407 	.word	0x40020407
 8001394:	cccccccd 	.word	0xcccccccd
 8001398:	4002081c 	.word	0x4002081c
 800139c:	40020880 	.word	0x40020880

080013a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013b0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80013b6:	4413      	add	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	461a      	mov	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80013c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2201      	movs	r2, #1
 80013d0:	409a      	lsls	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	1000823f 	.word	0x1000823f
 80013e4:	40020940 	.word	0x40020940

080013e8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f6:	e140      	b.n	800167a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	2101      	movs	r1, #1
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	4013      	ands	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 8132 	beq.w	8001674 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b01      	cmp	r3, #1
 800141a:	d005      	beq.n	8001428 <HAL_GPIO_Init+0x40>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d130      	bne.n	800148a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800145e:	2201      	movs	r2, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	f003 0201 	and.w	r2, r3, #1
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	2b03      	cmp	r3, #3
 8001494:	d017      	beq.n	80014c6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d123      	bne.n	800151a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	08da      	lsrs	r2, r3, #3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3208      	adds	r2, #8
 80014da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	220f      	movs	r2, #15
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	691a      	ldr	r2, [r3, #16]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	08da      	lsrs	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3208      	adds	r2, #8
 8001514:	6939      	ldr	r1, [r7, #16]
 8001516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2203      	movs	r2, #3
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0203 	and.w	r2, r3, #3
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 808c 	beq.w	8001674 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800155c:	4a4e      	ldr	r2, [pc, #312]	; (8001698 <HAL_GPIO_Init+0x2b0>)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	3302      	adds	r3, #2
 8001564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	2207      	movs	r2, #7
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001586:	d00d      	beq.n	80015a4 <HAL_GPIO_Init+0x1bc>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a44      	ldr	r2, [pc, #272]	; (800169c <HAL_GPIO_Init+0x2b4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d007      	beq.n	80015a0 <HAL_GPIO_Init+0x1b8>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a43      	ldr	r2, [pc, #268]	; (80016a0 <HAL_GPIO_Init+0x2b8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d101      	bne.n	800159c <HAL_GPIO_Init+0x1b4>
 8001598:	2302      	movs	r3, #2
 800159a:	e004      	b.n	80015a6 <HAL_GPIO_Init+0x1be>
 800159c:	2307      	movs	r3, #7
 800159e:	e002      	b.n	80015a6 <HAL_GPIO_Init+0x1be>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_GPIO_Init+0x1be>
 80015a4:	2300      	movs	r3, #0
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	f002 0203 	and.w	r2, r2, #3
 80015ac:	0092      	lsls	r2, r2, #2
 80015ae:	4093      	lsls	r3, r2
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015b6:	4938      	ldr	r1, [pc, #224]	; (8001698 <HAL_GPIO_Init+0x2b0>)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3302      	adds	r3, #2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015c4:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <HAL_GPIO_Init+0x2bc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015e8:	4a2e      	ldr	r2, [pc, #184]	; (80016a4 <HAL_GPIO_Init+0x2bc>)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_GPIO_Init+0x2bc>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001612:	4a24      	ldr	r2, [pc, #144]	; (80016a4 <HAL_GPIO_Init+0x2bc>)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001618:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <HAL_GPIO_Init+0x2bc>)
 800161a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800161e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800163e:	4a19      	ldr	r2, [pc, #100]	; (80016a4 <HAL_GPIO_Init+0x2bc>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <HAL_GPIO_Init+0x2bc>)
 8001648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800164c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_GPIO_Init+0x2bc>)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	f47f aeb7 	bne.w	80013f8 <HAL_GPIO_Init+0x10>
  }
}
 800168a:	bf00      	nop
 800168c:	bf00      	nop
 800168e:	371c      	adds	r7, #28
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40010000 	.word	0x40010000
 800169c:	48000400 	.word	0x48000400
 80016a0:	48000800 	.word	0x48000800
 80016a4:	58000800 	.word	0x58000800

080016a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80016b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	58000400 	.word	0x58000400

080016c4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <HAL_PWREx_GetVoltageRange+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	58000400 	.word	0x58000400

080016dc <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ec:	d101      	bne.n	80016f2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	58000400 	.word	0x58000400

08001700 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800170e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800172a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800173c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800174a:	d101      	bne.n	8001750 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800175e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176c:	6013      	str	r3, [r2, #0]
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800177a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr

08001792 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017a4:	d101      	bne.n	80017aa <LL_RCC_HSE_IsReady+0x18>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <LL_RCC_HSE_IsReady+0x1a>
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80017b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80017d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80017f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d101      	bne.n	8001804 <LL_RCC_HSI_IsReady+0x18>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <LL_RCC_HSI_IsReady+0x1a>
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	061b      	lsls	r3, r3, #24
 8001824:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800183a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b02      	cmp	r3, #2
 8001848:	d101      	bne.n	800184e <LL_RCC_LSE_IsReady+0x18>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <LL_RCC_LSE_IsReady+0x1a>
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800185c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800189c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d101      	bne.n	80018b0 <LL_RCC_LSI_IsReady+0x18>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <LL_RCC_LSI_IsReady+0x1a>
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80018be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6013      	str	r3, [r2, #0]
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80018da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6013      	str	r3, [r2, #0]
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b02      	cmp	r3, #2
 8001902:	d101      	bne.n	8001908 <LL_RCC_MSI_IsReady+0x16>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <LL_RCC_MSI_IsReady+0x18>
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b08      	cmp	r3, #8
 8001922:	d101      	bne.n	8001928 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800194c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001954:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	021b      	lsls	r3, r3, #8
 8001976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800197a:	4313      	orrs	r3, r2
 800197c:	604b      	str	r3, [r1, #4]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f023 0203 	bic.w	r2, r3, #3
 800199a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	608b      	str	r3, [r1, #8]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 030c 	and.w	r3, r3, #12
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80019cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4313      	orrs	r3, r2
 80019de:	608b      	str	r3, [r1, #8]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80019f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019fa:	f023 020f 	bic.w	r2, r3, #15
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a06:	4313      	orrs	r3, r2
 8001a08:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad0:	6013      	str	r3, [r2, #0]
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ae8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aec:	6013      	str	r3, [r2, #0]
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr

08001af6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b08:	d101      	bne.n	8001b0e <LL_RCC_PLL_IsReady+0x18>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <LL_RCC_PLL_IsReady+0x1a>
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f003 0303 	and.w	r3, r3, #3
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b84:	d101      	bne.n	8001b8a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba8:	d101      	bne.n	8001bae <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bca:	d101      	bne.n	8001bd0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001bec:	d101      	bne.n	8001bf2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e36f      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0e:	f7ff fece 	bl	80019ae <LL_RCC_GetSysClkSource>
 8001c12:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c14:	f7ff ffa2 	bl	8001b5c <LL_RCC_PLL_GetMainSource>
 8001c18:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0320 	and.w	r3, r3, #32
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 80c4 	beq.w	8001db0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_RCC_OscConfig+0x3e>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	2b0c      	cmp	r3, #12
 8001c32:	d176      	bne.n	8001d22 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d173      	bne.n	8001d22 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e353      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_OscConfig+0x68>
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c62:	e006      	b.n	8001c72 <HAL_RCC_OscConfig+0x76>
 8001c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d222      	bcs.n	8001cbc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fd3c 	bl	80026f8 <RCC_SetFlashLatencyFromMSIRange>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e331      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c94:	f043 0308 	orr.w	r3, r3, #8
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fe53 	bl	8001960 <LL_RCC_MSI_SetCalibTrimming>
 8001cba:	e021      	b.n	8001d00 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cc6:	f043 0308 	orr.w	r3, r3, #8
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fe3a 	bl	8001960 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 fd01 	bl	80026f8 <RCC_SetFlashLatencyFromMSIRange>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e2f6      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d00:	f000 fcc2 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4aa7      	ldr	r2, [pc, #668]	; (8001fa4 <HAL_RCC_OscConfig+0x3a8>)
 8001d08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001d0a:	4ba7      	ldr	r3, [pc, #668]	; (8001fa8 <HAL_RCC_OscConfig+0x3ac>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f82e 	bl	8000d70 <HAL_InitTick>
 8001d14:	4603      	mov	r3, r0
 8001d16:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001d18:	7cfb      	ldrb	r3, [r7, #19]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d047      	beq.n	8001dae <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001d1e:	7cfb      	ldrb	r3, [r7, #19]
 8001d20:	e2e5      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d02c      	beq.n	8001d84 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d2a:	f7ff fdc6 	bl	80018ba <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d2e:	f7ff f86b 	bl	8000e08 <HAL_GetTick>
 8001d32:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d36:	f7ff f867 	bl	8000e08 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e2d2      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d48:	f7ff fdd3 	bl	80018f2 <LL_RCC_MSI_IsReady>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f1      	beq.n	8001d36 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d5c:	f043 0308 	orr.w	r3, r3, #8
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d74:	4313      	orrs	r3, r2
 8001d76:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fdef 	bl	8001960 <LL_RCC_MSI_SetCalibTrimming>
 8001d82:	e015      	b.n	8001db0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d84:	f7ff fda7 	bl	80018d6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d88:	f7ff f83e 	bl	8000e08 <HAL_GetTick>
 8001d8c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d90:	f7ff f83a 	bl	8000e08 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e2a5      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001da2:	f7ff fda6 	bl	80018f2 <LL_RCC_MSI_IsReady>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f1      	bne.n	8001d90 <HAL_RCC_OscConfig+0x194>
 8001dac:	e000      	b.n	8001db0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001dae:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d058      	beq.n	8001e6e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d005      	beq.n	8001dce <HAL_RCC_OscConfig+0x1d2>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	d108      	bne.n	8001dda <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d105      	bne.n	8001dda <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d14b      	bne.n	8001e6e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e289      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df8:	d102      	bne.n	8001e00 <HAL_RCC_OscConfig+0x204>
 8001dfa:	f7ff fcae 	bl	800175a <LL_RCC_HSE_Enable>
 8001dfe:	e00d      	b.n	8001e1c <HAL_RCC_OscConfig+0x220>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001e08:	d104      	bne.n	8001e14 <HAL_RCC_OscConfig+0x218>
 8001e0a:	f7ff fc79 	bl	8001700 <LL_RCC_HSE_EnableTcxo>
 8001e0e:	f7ff fca4 	bl	800175a <LL_RCC_HSE_Enable>
 8001e12:	e003      	b.n	8001e1c <HAL_RCC_OscConfig+0x220>
 8001e14:	f7ff fcaf 	bl	8001776 <LL_RCC_HSE_Disable>
 8001e18:	f7ff fc80 	bl	800171c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d012      	beq.n	8001e4a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7fe fff0 	bl	8000e08 <HAL_GetTick>
 8001e28:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7fe ffec 	bl	8000e08 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e257      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e3e:	f7ff fca8 	bl	8001792 <LL_RCC_HSE_IsReady>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f1      	beq.n	8001e2c <HAL_RCC_OscConfig+0x230>
 8001e48:	e011      	b.n	8001e6e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7fe ffdd 	bl	8000e08 <HAL_GetTick>
 8001e4e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e52:	f7fe ffd9 	bl	8000e08 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b64      	cmp	r3, #100	; 0x64
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e244      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e64:	f7ff fc95 	bl	8001792 <LL_RCC_HSE_IsReady>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f1      	bne.n	8001e52 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d046      	beq.n	8001f08 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_OscConfig+0x290>
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b0c      	cmp	r3, #12
 8001e84:	d10e      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d10b      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e22a      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fcb6 	bl	800180e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ea2:	e031      	b.n	8001f08 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d019      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eac:	f7ff fc82 	bl	80017b4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7fe ffaa 	bl	8000e08 <HAL_GetTick>
 8001eb4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb8:	f7fe ffa6 	bl	8000e08 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e211      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001eca:	f7ff fc8f 	bl	80017ec <LL_RCC_HSI_IsReady>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f1      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fc98 	bl	800180e <LL_RCC_HSI_SetCalibTrimming>
 8001ede:	e013      	b.n	8001f08 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee0:	f7ff fc76 	bl	80017d0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7fe ff90 	bl	8000e08 <HAL_GetTick>
 8001ee8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eec:	f7fe ff8c 	bl	8000e08 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1f7      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001efe:	f7ff fc75 	bl	80017ec <LL_RCC_HSI_IsReady>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f1      	bne.n	8001eec <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d06e      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d056      	beq.n	8001fca <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f24:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69da      	ldr	r2, [r3, #28]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d031      	beq.n	8001f98 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d006      	beq.n	8001f4c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e1d0      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d013      	beq.n	8001f7e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001f56:	f7ff fc8f 	bl	8001878 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f5a:	f7fe ff55 	bl	8000e08 <HAL_GetTick>
 8001f5e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f62:	f7fe ff51 	bl	8000e08 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b11      	cmp	r3, #17
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e1bc      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001f74:	f7ff fc90 	bl	8001898 <LL_RCC_LSI_IsReady>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f1      	bne.n	8001f62 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f86:	f023 0210 	bic.w	r2, r3, #16
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f98:	f7ff fc5e 	bl	8001858 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9c:	f7fe ff34 	bl	8000e08 <HAL_GetTick>
 8001fa0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001fa2:	e00c      	b.n	8001fbe <HAL_RCC_OscConfig+0x3c2>
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fac:	f7fe ff2c 	bl	8000e08 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b11      	cmp	r3, #17
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e197      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001fbe:	f7ff fc6b 	bl	8001898 <LL_RCC_LSI_IsReady>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f1      	beq.n	8001fac <HAL_RCC_OscConfig+0x3b0>
 8001fc8:	e013      	b.n	8001ff2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fca:	f7ff fc55 	bl	8001878 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fce:	f7fe ff1b 	bl	8000e08 <HAL_GetTick>
 8001fd2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd6:	f7fe ff17 	bl	8000e08 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b11      	cmp	r3, #17
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e182      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001fe8:	f7ff fc56 	bl	8001898 <LL_RCC_LSI_IsReady>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f1      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 80d8 	beq.w	80021b0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002000:	f7ff fb6c 	bl	80016dc <LL_PWR_IsEnabledBkUpAccess>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d113      	bne.n	8002032 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800200a:	f7ff fb4d 	bl	80016a8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200e:	f7fe fefb 	bl	8000e08 <HAL_GetTick>
 8002012:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002016:	f7fe fef7 	bl	8000e08 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e162      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002028:	f7ff fb58 	bl	80016dc <LL_PWR_IsEnabledBkUpAccess>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f1      	beq.n	8002016 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d07b      	beq.n	8002132 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b85      	cmp	r3, #133	; 0x85
 8002040:	d003      	beq.n	800204a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b05      	cmp	r3, #5
 8002048:	d109      	bne.n	800205e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205e:	f7fe fed3 	bl	8000e08 <HAL_GetTick>
 8002062:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7fe fec5 	bl	8000e08 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e12e      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002090:	f7ff fbd1 	bl	8001836 <LL_RCC_LSE_IsReady>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0ef      	beq.n	800207a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b81      	cmp	r3, #129	; 0x81
 80020a0:	d003      	beq.n	80020aa <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	2b85      	cmp	r3, #133	; 0x85
 80020a8:	d121      	bne.n	80020ee <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7fe fead 	bl	8000e08 <HAL_GetTick>
 80020ae:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7fe fe9f 	bl	8000e08 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e108      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0ec      	beq.n	80020c6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80020ec:	e060      	b.n	80021b0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ee:	f7fe fe8b 	bl	8000e08 <HAL_GetTick>
 80020f2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210a:	f7fe fe7d 	bl	8000e08 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3288 	movw	r2, #5000	; 0x1388
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e0e6      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1ec      	bne.n	800210a <HAL_RCC_OscConfig+0x50e>
 8002130:	e03e      	b.n	80021b0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002132:	f7fe fe69 	bl	8000e08 <HAL_GetTick>
 8002136:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7fe fe5b 	bl	8000e08 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	; 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e0c4      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1ec      	bne.n	800214e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002174:	f7fe fe48 	bl	8000e08 <HAL_GetTick>
 8002178:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800217a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002186:	f023 0301 	bic.w	r3, r3, #1
 800218a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002190:	f7fe fe3a 	bl	8000e08 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	; 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e0a3      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80021a6:	f7ff fb46 	bl	8001836 <LL_RCC_LSE_IsReady>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1ef      	bne.n	8002190 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8099 	beq.w	80022ec <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	2b0c      	cmp	r3, #12
 80021be:	d06c      	beq.n	800229a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d14b      	bne.n	8002260 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c8:	f7ff fc87 	bl	8001ada <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7fe fe1c 	bl	8000e08 <HAL_GetTick>
 80021d0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d4:	f7fe fe18 	bl	8000e08 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b0a      	cmp	r3, #10
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e083      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80021e6:	f7ff fc86 	bl	8001af6 <LL_RCC_PLL_IsReady>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f1      	bne.n	80021d4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	4b40      	ldr	r3, [pc, #256]	; (80022f8 <HAL_RCC_OscConfig+0x6fc>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002202:	4311      	orrs	r1, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002208:	0212      	lsls	r2, r2, #8
 800220a:	4311      	orrs	r1, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002210:	4311      	orrs	r1, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002216:	4311      	orrs	r1, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800221c:	430a      	orrs	r2, r1
 800221e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002222:	4313      	orrs	r3, r2
 8002224:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002226:	f7ff fc4a 	bl	8001abe <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800222a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002238:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7fe fde5 	bl	8000e08 <HAL_GetTick>
 800223e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002242:	f7fe fde1 	bl	8000e08 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b0a      	cmp	r3, #10
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e04c      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002254:	f7ff fc4f 	bl	8001af6 <LL_RCC_PLL_IsReady>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f1      	beq.n	8002242 <HAL_RCC_OscConfig+0x646>
 800225e:	e045      	b.n	80022ec <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002260:	f7ff fc3b 	bl	8001ada <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe fdd0 	bl	8000e08 <HAL_GetTick>
 8002268:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226c:	f7fe fdcc 	bl	8000e08 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b0a      	cmp	r3, #10
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e037      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800227e:	f7ff fc3a 	bl	8001af6 <LL_RCC_PLL_IsReady>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f1      	bne.n	800226c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002292:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <HAL_RCC_OscConfig+0x700>)
 8002294:	4013      	ands	r3, r2
 8002296:	60cb      	str	r3, [r1, #12]
 8002298:	e028      	b.n	80022ec <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e023      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	f003 0203 	and.w	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d115      	bne.n	80022e8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d10e      	bne.n	80022e8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d106      	bne.n	80022e8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	11c1808c 	.word	0x11c1808c
 80022fc:	eefefffc 	.word	0xeefefffc

08002300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e10f      	b.n	8002534 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b89      	ldr	r3, [pc, #548]	; (800253c <HAL_RCC_ClockConfig+0x23c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d91b      	bls.n	800235a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b86      	ldr	r3, [pc, #536]	; (800253c <HAL_RCC_ClockConfig+0x23c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 0207 	bic.w	r2, r3, #7
 800232a:	4984      	ldr	r1, [pc, #528]	; (800253c <HAL_RCC_ClockConfig+0x23c>)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002332:	f7fe fd69 	bl	8000e08 <HAL_GetTick>
 8002336:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002338:	e008      	b.n	800234c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800233a:	f7fe fd65 	bl	8000e08 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0f3      	b.n	8002534 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234c:	4b7b      	ldr	r3, [pc, #492]	; (800253c <HAL_RCC_ClockConfig+0x23c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d1ef      	bne.n	800233a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d016      	beq.n	8002394 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fb2a 	bl	80019c4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002370:	f7fe fd4a 	bl	8000e08 <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002378:	f7fe fd46 	bl	8000e08 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e0d4      	b.n	8002534 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800238a:	f7ff fbf2 	bl	8001b72 <LL_RCC_IsActiveFlag_HPRE>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f1      	beq.n	8002378 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	d016      	beq.n	80023ce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fb20 	bl	80019ea <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023aa:	f7fe fd2d 	bl	8000e08 <HAL_GetTick>
 80023ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023b2:	f7fe fd29 	bl	8000e08 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e0b7      	b.n	8002534 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023c4:	f7ff fbe6 	bl	8001b94 <LL_RCC_IsActiveFlag_SHDHPRE>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f1      	beq.n	80023b2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d016      	beq.n	8002408 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fb19 	bl	8001a16 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023e4:	f7fe fd10 	bl	8000e08 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023ec:	f7fe fd0c 	bl	8000e08 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e09a      	b.n	8002534 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023fe:	f7ff fbdb 	bl	8001bb8 <LL_RCC_IsActiveFlag_PPRE1>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f1      	beq.n	80023ec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d017      	beq.n	8002444 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fb0e 	bl	8001a3c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002420:	f7fe fcf2 	bl	8000e08 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002428:	f7fe fcee 	bl	8000e08 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e07c      	b.n	8002534 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800243a:	f7ff fbce 	bl	8001bda <LL_RCC_IsActiveFlag_PPRE2>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f1      	beq.n	8002428 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d043      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d106      	bne.n	8002466 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002458:	f7ff f99b 	bl	8001792 <LL_RCC_HSE_IsReady>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d11e      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e066      	b.n	8002534 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d106      	bne.n	800247c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800246e:	f7ff fb42 	bl	8001af6 <LL_RCC_PLL_IsReady>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d113      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e05b      	b.n	8002534 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002484:	f7ff fa35 	bl	80018f2 <LL_RCC_MSI_IsReady>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d108      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e050      	b.n	8002534 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002492:	f7ff f9ab 	bl	80017ec <LL_RCC_HSI_IsReady>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e049      	b.n	8002534 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fa6f 	bl	8001988 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024aa:	f7fe fcad 	bl	8000e08 <HAL_GetTick>
 80024ae:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b0:	e00a      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b2:	f7fe fca9 	bl	8000e08 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e035      	b.n	8002534 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c8:	f7ff fa71 	bl	80019ae <LL_RCC_GetSysClkSource>
 80024cc:	4602      	mov	r2, r0
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d1ec      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_RCC_ClockConfig+0x23c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d21b      	bcs.n	800251e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_RCC_ClockConfig+0x23c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 0207 	bic.w	r2, r3, #7
 80024ee:	4913      	ldr	r1, [pc, #76]	; (800253c <HAL_RCC_ClockConfig+0x23c>)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f6:	f7fe fc87 	bl	8000e08 <HAL_GetTick>
 80024fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80024fe:	f7fe fc83 	bl	8000e08 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e011      	b.n	8002534 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <HAL_RCC_ClockConfig+0x23c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d1ef      	bne.n	80024fe <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800251e:	f000 f8b3 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 8002522:	4603      	mov	r3, r0
 8002524:	4a06      	ldr	r2, [pc, #24]	; (8002540 <HAL_RCC_ClockConfig+0x240>)
 8002526:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_RCC_ClockConfig+0x244>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe fc1f 	bl	8000d70 <HAL_InitTick>
 8002532:	4603      	mov	r3, r0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	58004000 	.word	0x58004000
 8002540:	20000000 	.word	0x20000000
 8002544:	20000004 	.word	0x20000004

08002548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002556:	f7ff fa2a 	bl	80019ae <LL_RCC_GetSysClkSource>
 800255a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800255c:	f7ff fafe 	bl	8001b5c <LL_RCC_PLL_GetMainSource>
 8002560:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x2c>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d139      	bne.n	80025e2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d136      	bne.n	80025e2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002574:	f7ff f9cd 	bl	8001912 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d115      	bne.n	80025aa <HAL_RCC_GetSysClockFreq+0x62>
 800257e:	f7ff f9c8 	bl	8001912 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002582:	4603      	mov	r3, r0
 8002584:	2b01      	cmp	r3, #1
 8002586:	d106      	bne.n	8002596 <HAL_RCC_GetSysClockFreq+0x4e>
 8002588:	f7ff f9d3 	bl	8001932 <LL_RCC_MSI_GetRange>
 800258c:	4603      	mov	r3, r0
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	e005      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x5a>
 8002596:	f7ff f9d7 	bl	8001948 <LL_RCC_MSI_GetRangeAfterStandby>
 800259a:	4603      	mov	r3, r0
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	4a36      	ldr	r2, [pc, #216]	; (800267c <HAL_RCC_GetSysClockFreq+0x134>)
 80025a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a8:	e014      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x8c>
 80025aa:	f7ff f9b2 	bl	8001912 <LL_RCC_MSI_IsEnabledRangeSelect>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_GetSysClockFreq+0x7a>
 80025b4:	f7ff f9bd 	bl	8001932 <LL_RCC_MSI_GetRange>
 80025b8:	4603      	mov	r3, r0
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	e005      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x86>
 80025c2:	f7ff f9c1 	bl	8001948 <LL_RCC_MSI_GetRangeAfterStandby>
 80025c6:	4603      	mov	r3, r0
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	4a2b      	ldr	r2, [pc, #172]	; (800267c <HAL_RCC_GetSysClockFreq+0x134>)
 80025d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d115      	bne.n	8002608 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025e0:	e012      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d102      	bne.n	80025ee <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <HAL_RCC_GetSysClockFreq+0x138>)
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	e00c      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d109      	bne.n	8002608 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025f4:	f7ff f8a0 	bl	8001738 <LL_RCC_HSE_IsEnabledDiv2>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d102      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_RCC_GetSysClockFreq+0x138>)
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	e001      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002604:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002606:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002608:	f7ff f9d1 	bl	80019ae <LL_RCC_GetSysClkSource>
 800260c:	4603      	mov	r3, r0
 800260e:	2b0c      	cmp	r3, #12
 8002610:	d12f      	bne.n	8002672 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002612:	f7ff faa3 	bl	8001b5c <LL_RCC_PLL_GetMainSource>
 8002616:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d003      	beq.n	8002626 <HAL_RCC_GetSysClockFreq+0xde>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d003      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0xe4>
 8002624:	e00d      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <HAL_RCC_GetSysClockFreq+0x138>)
 8002628:	60fb      	str	r3, [r7, #12]
        break;
 800262a:	e00d      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800262c:	f7ff f884 	bl	8001738 <LL_RCC_HSE_IsEnabledDiv2>
 8002630:	4603      	mov	r3, r0
 8002632:	2b01      	cmp	r3, #1
 8002634:	d102      	bne.n	800263c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_RCC_GetSysClockFreq+0x138>)
 8002638:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800263a:	e005      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800263c:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_RCC_GetSysClockFreq+0x13c>)
 800263e:	60fb      	str	r3, [r7, #12]
        break;
 8002640:	e002      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	60fb      	str	r3, [r7, #12]
        break;
 8002646:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002648:	f7ff fa66 	bl	8001b18 <LL_RCC_PLL_GetN>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	fb03 f402 	mul.w	r4, r3, r2
 8002654:	f7ff fa77 	bl	8001b46 <LL_RCC_PLL_GetDivider>
 8002658:	4603      	mov	r3, r0
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	3301      	adds	r3, #1
 800265e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002662:	f7ff fa65 	bl	8001b30 <LL_RCC_PLL_GetR>
 8002666:	4603      	mov	r3, r0
 8002668:	0f5b      	lsrs	r3, r3, #29
 800266a:	3301      	adds	r3, #1
 800266c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002670:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002672:	697b      	ldr	r3, [r7, #20]
}
 8002674:	4618      	mov	r0, r3
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	bd90      	pop	{r4, r7, pc}
 800267c:	08004428 	.word	0x08004428
 8002680:	00f42400 	.word	0x00f42400
 8002684:	01e84800 	.word	0x01e84800

08002688 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002688:	b598      	push	{r3, r4, r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800268c:	f7ff ff5c 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8002690:	4604      	mov	r4, r0
 8002692:	f7ff f9e6 	bl	8001a62 <LL_RCC_GetAHBPrescaler>
 8002696:	4603      	mov	r3, r0
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	4a03      	ldr	r2, [pc, #12]	; (80026ac <HAL_RCC_GetHCLKFreq+0x24>)
 80026a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd98      	pop	{r3, r4, r7, pc}
 80026ac:	080043c8 	.word	0x080043c8

080026b0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b0:	b598      	push	{r3, r4, r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80026b4:	f7ff ffe8 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026b8:	4604      	mov	r4, r0
 80026ba:	f7ff f9ea 	bl	8001a92 <LL_RCC_GetAPB1Prescaler>
 80026be:	4603      	mov	r3, r0
 80026c0:	0a1b      	lsrs	r3, r3, #8
 80026c2:	4a03      	ldr	r2, [pc, #12]	; (80026d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	bd98      	pop	{r3, r4, r7, pc}
 80026d0:	08004408 	.word	0x08004408

080026d4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d4:	b598      	push	{r3, r4, r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80026d8:	f7ff ffd6 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026dc:	4604      	mov	r4, r0
 80026de:	f7ff f9e3 	bl	8001aa8 <LL_RCC_GetAPB2Prescaler>
 80026e2:	4603      	mov	r3, r0
 80026e4:	0adb      	lsrs	r3, r3, #11
 80026e6:	4a03      	ldr	r2, [pc, #12]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ec:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd98      	pop	{r3, r4, r7, pc}
 80026f4:	08004408 	.word	0x08004408

080026f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	091b      	lsrs	r3, r3, #4
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	4a10      	ldr	r2, [pc, #64]	; (800274c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800270a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002710:	f7ff f9b2 	bl	8001a78 <LL_RCC_GetAHB3Prescaler>
 8002714:	4603      	mov	r3, r0
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	4a0c      	ldr	r2, [pc, #48]	; (8002750 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	fbb2 f3f3 	udiv	r3, r2, r3
 8002728:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	4a09      	ldr	r2, [pc, #36]	; (8002754 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	0c9c      	lsrs	r4, r3, #18
 8002734:	f7fe ffc6 	bl	80016c4 <HAL_PWREx_GetVoltageRange>
 8002738:	4603      	mov	r3, r0
 800273a:	4619      	mov	r1, r3
 800273c:	4620      	mov	r0, r4
 800273e:	f000 f80b 	bl	8002758 <RCC_SetFlashLatency>
 8002742:	4603      	mov	r3, r0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	bd90      	pop	{r4, r7, pc}
 800274c:	08004428 	.word	0x08004428
 8002750:	080043c8 	.word	0x080043c8
 8002754:	431bde83 	.word	0x431bde83

08002758 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08e      	sub	sp, #56	; 0x38
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002762:	4a3a      	ldr	r2, [pc, #232]	; (800284c <RCC_SetFlashLatency+0xf4>)
 8002764:	f107 0320 	add.w	r3, r7, #32
 8002768:	e892 0003 	ldmia.w	r2, {r0, r1}
 800276c:	6018      	str	r0, [r3, #0]
 800276e:	3304      	adds	r3, #4
 8002770:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002772:	4a37      	ldr	r2, [pc, #220]	; (8002850 <RCC_SetFlashLatency+0xf8>)
 8002774:	f107 0318 	add.w	r3, r7, #24
 8002778:	e892 0003 	ldmia.w	r2, {r0, r1}
 800277c:	6018      	str	r0, [r3, #0]
 800277e:	3304      	adds	r3, #4
 8002780:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002782:	4a34      	ldr	r2, [pc, #208]	; (8002854 <RCC_SetFlashLatency+0xfc>)
 8002784:	f107 030c 	add.w	r3, r7, #12
 8002788:	ca07      	ldmia	r2, {r0, r1, r2}
 800278a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800278e:	2300      	movs	r3, #0
 8002790:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002798:	d11b      	bne.n	80027d2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800279a:	2300      	movs	r3, #0
 800279c:	633b      	str	r3, [r7, #48]	; 0x30
 800279e:	e014      	b.n	80027ca <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	3338      	adds	r3, #56	; 0x38
 80027a6:	443b      	add	r3, r7
 80027a8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80027ac:	461a      	mov	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d807      	bhi.n	80027c4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	3338      	adds	r3, #56	; 0x38
 80027ba:	443b      	add	r3, r7
 80027bc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027c2:	e021      	b.n	8002808 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c6:	3301      	adds	r3, #1
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
 80027ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d9e7      	bls.n	80027a0 <RCC_SetFlashLatency+0x48>
 80027d0:	e01a      	b.n	8002808 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d6:	e014      	b.n	8002802 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	3338      	adds	r3, #56	; 0x38
 80027de:	443b      	add	r3, r7
 80027e0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80027e4:	461a      	mov	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d807      	bhi.n	80027fc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	3338      	adds	r3, #56	; 0x38
 80027f2:	443b      	add	r3, r7
 80027f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027fa:	e005      	b.n	8002808 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fe:	3301      	adds	r3, #1
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	2b02      	cmp	r3, #2
 8002806:	d9e7      	bls.n	80027d8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002808:	4b13      	ldr	r3, [pc, #76]	; (8002858 <RCC_SetFlashLatency+0x100>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 0207 	bic.w	r2, r3, #7
 8002810:	4911      	ldr	r1, [pc, #68]	; (8002858 <RCC_SetFlashLatency+0x100>)
 8002812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002818:	f7fe faf6 	bl	8000e08 <HAL_GetTick>
 800281c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800281e:	e008      	b.n	8002832 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002820:	f7fe faf2 	bl	8000e08 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e007      	b.n	8002842 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <RCC_SetFlashLatency+0x100>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800283c:	429a      	cmp	r2, r3
 800283e:	d1ef      	bne.n	8002820 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3738      	adds	r7, #56	; 0x38
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	080043ac 	.word	0x080043ac
 8002850:	080043b4 	.word	0x080043b4
 8002854:	080043bc 	.word	0x080043bc
 8002858:	58004000 	.word	0x58004000

0800285c <LL_RCC_LSE_IsReady>:
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b02      	cmp	r3, #2
 800286e:	d101      	bne.n	8002874 <LL_RCC_LSE_IsReady+0x18>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <LL_RCC_LSE_IsReady+0x1a>
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <LL_RCC_SetUSARTClockSource>:
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	0c1b      	lsrs	r3, r3, #16
 8002892:	43db      	mvns	r3, r3
 8002894:	401a      	ands	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	b29b      	uxth	r3, r3
 800289a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <LL_RCC_SetI2SClockSource>:
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80028b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <LL_RCC_SetLPUARTClockSource>:
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80028e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <LL_RCC_SetI2CClockSource>:
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800290a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800291a:	43db      	mvns	r3, r3
 800291c:	401a      	ands	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <LL_RCC_SetLPTIMClockSource>:
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002946:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	0c1b      	lsrs	r3, r3, #16
 800294e:	041b      	lsls	r3, r3, #16
 8002950:	43db      	mvns	r3, r3
 8002952:	401a      	ands	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <LL_RCC_SetRNGClockSource>:
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <LL_RCC_SetADCClockSource>:
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800299e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <LL_RCC_SetRTCClockSource>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <LL_RCC_GetRTCClockSource>:
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80029ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <LL_RCC_ForceBackupDomainReset>:
{
 8002a02:	b480      	push	{r7}
 8002a04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a1a:	bf00      	nop
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002a50:	2300      	movs	r3, #0
 8002a52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002a54:	2300      	movs	r3, #0
 8002a56:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d058      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002a64:	f7fe fe20 	bl	80016a8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a68:	f7fe f9ce 	bl	8000e08 <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002a6e:	e009      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a70:	f7fe f9ca 	bl	8000e08 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d902      	bls.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	74fb      	strb	r3, [r7, #19]
        break;
 8002a82:	e006      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002a84:	4b7b      	ldr	r3, [pc, #492]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a90:	d1ee      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002a92:	7cfb      	ldrb	r3, [r7, #19]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d13c      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002a98:	f7ff ffa7 	bl	80029ea <LL_RCC_GetRTCClockSource>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d00f      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ab4:	f7ff ffa5 	bl	8002a02 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab8:	f7ff ffb3 	bl	8002a22 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002abc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d014      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe f99a 	bl	8000e08 <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad8:	f7fe f996 	bl	8000e08 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d902      	bls.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	74fb      	strb	r3, [r7, #19]
            break;
 8002aee:	e004      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002af0:	f7ff feb4 	bl	800285c <LL_RCC_LSE_IsReady>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d1ee      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002afa:	7cfb      	ldrb	r3, [r7, #19]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d105      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff5b 	bl	80029c0 <LL_RCC_SetRTCClockSource>
 8002b0a:	e004      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	74bb      	strb	r3, [r7, #18]
 8002b10:	e001      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b12:	7cfb      	ldrb	r3, [r7, #19]
 8002b14:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d004      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fea9 	bl	800287e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d004      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fe9e 	bl	800287e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d004      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fec0 	bl	80028d8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fee6 	bl	800293a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d004      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fedb 	bl	800293a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d004      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fed0 	bl	800293a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d004      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fea9 	bl	8002902 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d004      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fe9e 	bl	8002902 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d004      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fe93 	bl	8002902 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d011      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fe5e 	bl	80028ae <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d010      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fea5 	bl	800296c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d107      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c38:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d011      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fea3 	bl	8002996 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c58:	d107      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002c6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	58000400 	.word	0x58000400

08002c78 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c82:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	58000400 	.word	0x58000400

08002c98 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002ca4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	58000400 	.word	0x58000400

08002cb8 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d101      	bne.n	8002ccc <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	58000400 	.word	0x58000400

08002cdc <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d101      	bne.n	8002cf0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	58000400 	.word	0x58000400

08002d00 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	72fb      	strb	r3, [r7, #11]
 8002d10:	4613      	mov	r3, r2
 8002d12:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	799b      	ldrb	r3, [r3, #6]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d14a      	bne.n	8002db4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	795b      	ldrb	r3, [r3, #5]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e045      	b.n	8002db6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f9c3 	bl	80030bc <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8002d36:	7afb      	ldrb	r3, [r7, #11]
 8002d38:	2b84      	cmp	r3, #132	; 0x84
 8002d3a:	d002      	beq.n	8002d42 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8002d3c:	7afb      	ldrb	r3, [r7, #11]
 8002d3e:	2b94      	cmp	r3, #148	; 0x94
 8002d40:	d103      	bne.n	8002d4a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	711a      	strb	r2, [r3, #4]
 8002d48:	e002      	b.n	8002d50 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002d50:	f7ff ffa2 	bl	8002c98 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002d54:	7afb      	ldrb	r3, [r7, #11]
 8002d56:	4619      	mov	r1, r3
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f901 	bl	8002f60 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	82bb      	strh	r3, [r7, #20]
 8002d62:	e00a      	b.n	8002d7a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002d64:	8abb      	ldrh	r3, [r7, #20]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f8f6 	bl	8002f60 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002d74:	8abb      	ldrh	r3, [r7, #20]
 8002d76:	3301      	adds	r3, #1
 8002d78:	82bb      	strh	r3, [r7, #20]
 8002d7a:	8aba      	ldrh	r2, [r7, #20]
 8002d7c:	893b      	ldrh	r3, [r7, #8]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d3f0      	bcc.n	8002d64 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002d82:	f7ff ff79 	bl	8002c78 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8002d86:	7afb      	ldrb	r3, [r7, #11]
 8002d88:	2b84      	cmp	r3, #132	; 0x84
 8002d8a:	d002      	beq.n	8002d92 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f9b9 	bl	8003104 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	75fb      	strb	r3, [r7, #23]
 8002d9e:	e001      	b.n	8002da4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	715a      	strb	r2, [r3, #5]

    return status;
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
 8002db2:	e000      	b.n	8002db6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002db4:	2302      	movs	r3, #2
  }
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b088      	sub	sp, #32
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	460b      	mov	r3, r1
 8002dcc:	72fb      	strb	r3, [r7, #11]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	799b      	ldrb	r3, [r3, #6]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d13d      	bne.n	8002e5c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	795b      	ldrb	r3, [r3, #5]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e038      	b.n	8002e5e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f962 	bl	80030bc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002df8:	f7ff ff4e 	bl	8002c98 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002dfc:	7afb      	ldrb	r3, [r7, #11]
 8002dfe:	4619      	mov	r1, r3
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f8ad 	bl	8002f60 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8002e06:	2100      	movs	r1, #0
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f8a9 	bl	8002f60 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	82fb      	strh	r3, [r7, #22]
 8002e12:	e009      	b.n	8002e28 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002e14:	69b9      	ldr	r1, [r7, #24]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f8f8 	bl	800300c <SUBGHZSPI_Receive>
      pData++;
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002e22:	8afb      	ldrh	r3, [r7, #22]
 8002e24:	3301      	adds	r3, #1
 8002e26:	82fb      	strh	r3, [r7, #22]
 8002e28:	8afa      	ldrh	r2, [r7, #22]
 8002e2a:	893b      	ldrh	r3, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d3f1      	bcc.n	8002e14 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002e30:	f7ff ff22 	bl	8002c78 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f965 	bl	8003104 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	77fb      	strb	r3, [r7, #31]
 8002e46:	e001      	b.n	8002e4c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	715a      	strb	r2, [r3, #5]

    return status;
 8002e58:	7ffb      	ldrb	r3, [r7, #31]
 8002e5a:	e000      	b.n	8002e5e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002e5c:	2302      	movs	r3, #2
  }
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3720      	adds	r7, #32
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8002e6e:	2300      	movs	r3, #0
 8002e70:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8002e72:	f107 020c 	add.w	r2, r7, #12
 8002e76:	2302      	movs	r3, #2
 8002e78:	2112      	movs	r1, #18
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ff9f 	bl	8002dbe <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8002e80:	7b3b      	ldrb	r3, [r7, #12]
 8002e82:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8002e84:	89fb      	ldrh	r3, [r7, #14]
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	b21a      	sxth	r2, r3
 8002e8a:	7b7b      	ldrb	r3, [r7, #13]
 8002e8c:	b21b      	sxth	r3, r3
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	b21b      	sxth	r3, r3
 8002e92:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8002e94:	f107 020c 	add.w	r2, r7, #12
 8002e98:	2302      	movs	r3, #2
 8002e9a:	2102      	movs	r1, #2
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff ff2f 	bl	8002d00 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8002ea2:	89fb      	ldrh	r3, [r7, #14]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7fd fe9f 	bl	8000bf0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8002eb2:	89fb      	ldrh	r3, [r7, #14]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7fd fea5 	bl	8000c0c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8002ec2:	89fb      	ldrh	r3, [r7, #14]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7fd fef5 	bl	8000cbc <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8002ed2:	89fb      	ldrh	r3, [r7, #14]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7fd fefb 	bl	8000cd8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8002ee2:	89fb      	ldrh	r3, [r7, #14]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7fd ff01 	bl	8000cf4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8002ef2:	89fb      	ldrh	r3, [r7, #14]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7fd fecf 	bl	8000ca0 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8002f02:	89fb      	ldrh	r3, [r7, #14]
 8002f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7fd fe8b 	bl	8000c28 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8002f12:	89fb      	ldrh	r3, [r7, #14]
 8002f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00d      	beq.n	8002f38 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8002f1c:	89fb      	ldrh	r3, [r7, #14]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d004      	beq.n	8002f30 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8002f26:	2101      	movs	r1, #1
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7fd fe8b 	bl	8000c44 <HAL_SUBGHZ_CADStatusCallback>
 8002f2e:	e003      	b.n	8002f38 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8002f30:	2100      	movs	r1, #0
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fd fe86 	bl	8000c44 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8002f38:	89fb      	ldrh	r3, [r7, #14]
 8002f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fd fe9c 	bl	8000c80 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8002f48:	89fb      	ldrh	r3, [r7, #14]
 8002f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fd fedc 	bl	8000d10 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8002f58:	bf00      	nop
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002f70:	4b23      	ldr	r3, [pc, #140]	; (8003000 <SUBGHZSPI_Transmit+0xa0>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	0cdb      	lsrs	r3, r3, #19
 8002f7e:	2264      	movs	r2, #100	; 0x64
 8002f80:	fb02 f303 	mul.w	r3, r2, r3
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d105      	bne.n	8002f98 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	609a      	str	r2, [r3, #8]
      break;
 8002f96:	e008      	b.n	8002faa <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <SUBGHZSPI_Transmit+0xa4>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d1ed      	bne.n	8002f86 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8002faa:	4b17      	ldr	r3, [pc, #92]	; (8003008 <SUBGHZSPI_Transmit+0xa8>)
 8002fac:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <SUBGHZSPI_Transmit+0xa0>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	0cdb      	lsrs	r3, r3, #19
 8002fc2:	2264      	movs	r2, #100	; 0x64
 8002fc4:	fb02 f303 	mul.w	r3, r2, r3
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d105      	bne.n	8002fdc <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	609a      	str	r2, [r3, #8]
      break;
 8002fda:	e008      	b.n	8002fee <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8002fe2:	4b08      	ldr	r3, [pc, #32]	; (8003004 <SUBGHZSPI_Transmit+0xa4>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d1ed      	bne.n	8002fca <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <SUBGHZSPI_Transmit+0xa4>)
 8002ff0:	68db      	ldr	r3, [r3, #12]

  return status;
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000000 	.word	0x20000000
 8003004:	58010000 	.word	0x58010000
 8003008:	5801000c 	.word	0x5801000c

0800300c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800301a:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <SUBGHZSPI_Receive+0xa4>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4613      	mov	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	1a9b      	subs	r3, r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	0cdb      	lsrs	r3, r3, #19
 8003028:	2264      	movs	r2, #100	; 0x64
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d105      	bne.n	8003042 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	609a      	str	r2, [r3, #8]
      break;
 8003040:	e008      	b.n	8003054 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	3b01      	subs	r3, #1
 8003046:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003048:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <SUBGHZSPI_Receive+0xa8>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b02      	cmp	r3, #2
 8003052:	d1ed      	bne.n	8003030 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003054:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <SUBGHZSPI_Receive+0xac>)
 8003056:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	22ff      	movs	r2, #255	; 0xff
 800305c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800305e:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <SUBGHZSPI_Receive+0xa4>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4613      	mov	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	0cdb      	lsrs	r3, r3, #19
 800306c:	2264      	movs	r2, #100	; 0x64
 800306e:	fb02 f303 	mul.w	r3, r2, r3
 8003072:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d105      	bne.n	8003086 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	609a      	str	r2, [r3, #8]
      break;
 8003084:	e008      	b.n	8003098 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3b01      	subs	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <SUBGHZSPI_Receive+0xa8>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b01      	cmp	r3, #1
 8003096:	d1ed      	bne.n	8003074 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <SUBGHZSPI_Receive+0xa8>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	701a      	strb	r2, [r3, #0]

  return status;
 80030a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000000 	.word	0x20000000
 80030b4:	58010000 	.word	0x58010000
 80030b8:	5801000c 	.word	0x5801000c

080030bc <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	791b      	ldrb	r3, [r3, #4]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d111      	bne.n	80030f0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <SUBGHZ_CheckDeviceReady+0x44>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80030dc:	f7ff fddc 	bl	8002c98 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f9      	bne.n	80030e0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80030ec:	f7ff fdc4 	bl	8002c78 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f807 	bl	8003104 <SUBGHZ_WaitOnBusy>
 80030f6:	4603      	mov	r3, r0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000000 	.word	0x20000000

08003104 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003110:	4b12      	ldr	r3, [pc, #72]	; (800315c <SUBGHZ_WaitOnBusy+0x58>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	0d1b      	lsrs	r3, r3, #20
 800311e:	2264      	movs	r2, #100	; 0x64
 8003120:	fb02 f303 	mul.w	r3, r2, r3
 8003124:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003126:	f7ff fdd9 	bl	8002cdc <LL_PWR_IsActiveFlag_RFBUSYMS>
 800312a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d105      	bne.n	800313e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	609a      	str	r2, [r3, #8]
      break;
 800313c:	e009      	b.n	8003152 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3b01      	subs	r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003144:	f7ff fdb8 	bl	8002cb8 <LL_PWR_IsActiveFlag_RFBUSYS>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	2b01      	cmp	r3, #1
 8003150:	d0e9      	beq.n	8003126 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8003152:	7dfb      	ldrb	r3, [r7, #23]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000000 	.word	0x20000000

08003160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e049      	b.n	8003206 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fd fbce 	bl	8000928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3304      	adds	r3, #4
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f000 f940 	bl	8003424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_TIM_ConfigClockSource+0x1c>
 8003226:	2302      	movs	r3, #2
 8003228:	e0b6      	b.n	8003398 <HAL_TIM_ConfigClockSource+0x18a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2202      	movs	r2, #2
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003248:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800324c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003254:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003266:	d03e      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0xd8>
 8003268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800326c:	f200 8087 	bhi.w	800337e <HAL_TIM_ConfigClockSource+0x170>
 8003270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003274:	f000 8086 	beq.w	8003384 <HAL_TIM_ConfigClockSource+0x176>
 8003278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327c:	d87f      	bhi.n	800337e <HAL_TIM_ConfigClockSource+0x170>
 800327e:	2b70      	cmp	r3, #112	; 0x70
 8003280:	d01a      	beq.n	80032b8 <HAL_TIM_ConfigClockSource+0xaa>
 8003282:	2b70      	cmp	r3, #112	; 0x70
 8003284:	d87b      	bhi.n	800337e <HAL_TIM_ConfigClockSource+0x170>
 8003286:	2b60      	cmp	r3, #96	; 0x60
 8003288:	d050      	beq.n	800332c <HAL_TIM_ConfigClockSource+0x11e>
 800328a:	2b60      	cmp	r3, #96	; 0x60
 800328c:	d877      	bhi.n	800337e <HAL_TIM_ConfigClockSource+0x170>
 800328e:	2b50      	cmp	r3, #80	; 0x50
 8003290:	d03c      	beq.n	800330c <HAL_TIM_ConfigClockSource+0xfe>
 8003292:	2b50      	cmp	r3, #80	; 0x50
 8003294:	d873      	bhi.n	800337e <HAL_TIM_ConfigClockSource+0x170>
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d058      	beq.n	800334c <HAL_TIM_ConfigClockSource+0x13e>
 800329a:	2b40      	cmp	r3, #64	; 0x40
 800329c:	d86f      	bhi.n	800337e <HAL_TIM_ConfigClockSource+0x170>
 800329e:	2b30      	cmp	r3, #48	; 0x30
 80032a0:	d064      	beq.n	800336c <HAL_TIM_ConfigClockSource+0x15e>
 80032a2:	2b30      	cmp	r3, #48	; 0x30
 80032a4:	d86b      	bhi.n	800337e <HAL_TIM_ConfigClockSource+0x170>
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d060      	beq.n	800336c <HAL_TIM_ConfigClockSource+0x15e>
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	d867      	bhi.n	800337e <HAL_TIM_ConfigClockSource+0x170>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d05c      	beq.n	800336c <HAL_TIM_ConfigClockSource+0x15e>
 80032b2:	2b10      	cmp	r3, #16
 80032b4:	d05a      	beq.n	800336c <HAL_TIM_ConfigClockSource+0x15e>
 80032b6:	e062      	b.n	800337e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032c8:	f000 fa1c 	bl	8003704 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	609a      	str	r2, [r3, #8]
      break;
 80032e4:	e04f      	b.n	8003386 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032f6:	f000 fa05 	bl	8003704 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003308:	609a      	str	r2, [r3, #8]
      break;
 800330a:	e03c      	b.n	8003386 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003318:	461a      	mov	r2, r3
 800331a:	f000 f97a 	bl	8003612 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2150      	movs	r1, #80	; 0x50
 8003324:	4618      	mov	r0, r3
 8003326:	f000 f9d1 	bl	80036cc <TIM_ITRx_SetConfig>
      break;
 800332a:	e02c      	b.n	8003386 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003338:	461a      	mov	r2, r3
 800333a:	f000 f998 	bl	800366e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2160      	movs	r1, #96	; 0x60
 8003344:	4618      	mov	r0, r3
 8003346:	f000 f9c1 	bl	80036cc <TIM_ITRx_SetConfig>
      break;
 800334a:	e01c      	b.n	8003386 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003358:	461a      	mov	r2, r3
 800335a:	f000 f95a 	bl	8003612 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2140      	movs	r1, #64	; 0x40
 8003364:	4618      	mov	r0, r3
 8003366:	f000 f9b1 	bl	80036cc <TIM_ITRx_SetConfig>
      break;
 800336a:	e00c      	b.n	8003386 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4619      	mov	r1, r3
 8003376:	4610      	mov	r0, r2
 8003378:	f000 f9a8 	bl	80036cc <TIM_ITRx_SetConfig>
      break;
 800337c:	e003      	b.n	8003386 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	73fb      	strb	r3, [r7, #15]
      break;
 8003382:	e000      	b.n	8003386 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003384:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003396:	7bfb      	ldrb	r3, [r7, #15]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e031      	b.n	800341c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80033c8:	6839      	ldr	r1, [r7, #0]
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f88c 	bl	80034e8 <TIM_SlaveTimer_SetConfig>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e018      	b.n	800341c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003408:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a29      	ldr	r2, [pc, #164]	; (80034dc <TIM_Base_SetConfig+0xb8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d003      	beq.n	8003444 <TIM_Base_SetConfig+0x20>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003442:	d108      	bne.n	8003456 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a20      	ldr	r2, [pc, #128]	; (80034dc <TIM_Base_SetConfig+0xb8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00b      	beq.n	8003476 <TIM_Base_SetConfig+0x52>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003464:	d007      	beq.n	8003476 <TIM_Base_SetConfig+0x52>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <TIM_Base_SetConfig+0xbc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d003      	beq.n	8003476 <TIM_Base_SetConfig+0x52>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a1c      	ldr	r2, [pc, #112]	; (80034e4 <TIM_Base_SetConfig+0xc0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d108      	bne.n	8003488 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a0b      	ldr	r2, [pc, #44]	; (80034dc <TIM_Base_SetConfig+0xb8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d007      	beq.n	80034c4 <TIM_Base_SetConfig+0xa0>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <TIM_Base_SetConfig+0xbc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d003      	beq.n	80034c4 <TIM_Base_SetConfig+0xa0>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a09      	ldr	r2, [pc, #36]	; (80034e4 <TIM_Base_SetConfig+0xc0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d103      	bne.n	80034cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	615a      	str	r2, [r3, #20]
}
 80034d2:	bf00      	nop
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	40012c00 	.word	0x40012c00
 80034e0:	40014400 	.word	0x40014400
 80034e4:	40014800 	.word	0x40014800

080034e8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003508:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351a:	f023 0307 	bic.w	r3, r3, #7
 800351e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b70      	cmp	r3, #112	; 0x70
 8003538:	d01a      	beq.n	8003570 <TIM_SlaveTimer_SetConfig+0x88>
 800353a:	2b70      	cmp	r3, #112	; 0x70
 800353c:	d860      	bhi.n	8003600 <TIM_SlaveTimer_SetConfig+0x118>
 800353e:	2b60      	cmp	r3, #96	; 0x60
 8003540:	d054      	beq.n	80035ec <TIM_SlaveTimer_SetConfig+0x104>
 8003542:	2b60      	cmp	r3, #96	; 0x60
 8003544:	d85c      	bhi.n	8003600 <TIM_SlaveTimer_SetConfig+0x118>
 8003546:	2b50      	cmp	r3, #80	; 0x50
 8003548:	d046      	beq.n	80035d8 <TIM_SlaveTimer_SetConfig+0xf0>
 800354a:	2b50      	cmp	r3, #80	; 0x50
 800354c:	d858      	bhi.n	8003600 <TIM_SlaveTimer_SetConfig+0x118>
 800354e:	2b40      	cmp	r3, #64	; 0x40
 8003550:	d019      	beq.n	8003586 <TIM_SlaveTimer_SetConfig+0x9e>
 8003552:	2b40      	cmp	r3, #64	; 0x40
 8003554:	d854      	bhi.n	8003600 <TIM_SlaveTimer_SetConfig+0x118>
 8003556:	2b30      	cmp	r3, #48	; 0x30
 8003558:	d055      	beq.n	8003606 <TIM_SlaveTimer_SetConfig+0x11e>
 800355a:	2b30      	cmp	r3, #48	; 0x30
 800355c:	d850      	bhi.n	8003600 <TIM_SlaveTimer_SetConfig+0x118>
 800355e:	2b20      	cmp	r3, #32
 8003560:	d051      	beq.n	8003606 <TIM_SlaveTimer_SetConfig+0x11e>
 8003562:	2b20      	cmp	r3, #32
 8003564:	d84c      	bhi.n	8003600 <TIM_SlaveTimer_SetConfig+0x118>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d04d      	beq.n	8003606 <TIM_SlaveTimer_SetConfig+0x11e>
 800356a:	2b10      	cmp	r3, #16
 800356c:	d04b      	beq.n	8003606 <TIM_SlaveTimer_SetConfig+0x11e>
 800356e:	e047      	b.n	8003600 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003580:	f000 f8c0 	bl	8003704 <TIM_ETR_SetConfig>
      break;
 8003584:	e040      	b.n	8003608 <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d101      	bne.n	8003592 <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e03b      	b.n	800360a <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6a1a      	ldr	r2, [r3, #32]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035b8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	621a      	str	r2, [r3, #32]
      break;
 80035d6:	e017      	b.n	8003608 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e4:	461a      	mov	r2, r3
 80035e6:	f000 f814 	bl	8003612 <TIM_TI1_ConfigInputStage>
      break;
 80035ea:	e00d      	b.n	8003608 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035f8:	461a      	mov	r2, r3
 80035fa:	f000 f838 	bl	800366e <TIM_TI2_ConfigInputStage>
      break;
 80035fe:	e003      	b.n	8003608 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	75fb      	strb	r3, [r7, #23]
      break;
 8003604:	e000      	b.n	8003608 <TIM_SlaveTimer_SetConfig+0x120>
      break;
 8003606:	bf00      	nop
  }

  return status;
 8003608:	7dfb      	ldrb	r3, [r7, #23]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003612:	b480      	push	{r7}
 8003614:	b087      	sub	sp, #28
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f023 0201 	bic.w	r2, r3, #1
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800363c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f023 030a 	bic.w	r3, r3, #10
 800364e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	621a      	str	r2, [r3, #32]
}
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr

0800366e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800366e:	b480      	push	{r7}
 8003670:	b087      	sub	sp, #28
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f023 0210 	bic.w	r2, r3, #16
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	031b      	lsls	r3, r3, #12
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	621a      	str	r2, [r3, #32]
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80036e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f043 0307 	orr.w	r3, r3, #7
 80036f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	609a      	str	r2, [r3, #8]
}
 80036fa:	bf00      	nop
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800371e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	021a      	lsls	r2, r3, #8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	431a      	orrs	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4313      	orrs	r3, r2
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	609a      	str	r2, [r3, #8]
}
 8003738:	bf00      	nop
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr
	...

08003744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003758:	2302      	movs	r3, #2
 800375a:	e04a      	b.n	80037f2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1e      	ldr	r2, [pc, #120]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d108      	bne.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800378c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a11      	ldr	r2, [pc, #68]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d004      	beq.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c4:	d10c      	bne.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	40012c00 	.word	0x40012c00

08003800 <LL_RCC_GetUSARTClockSource>:
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	401a      	ands	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	041b      	lsls	r3, r3, #16
 8003818:	4313      	orrs	r3, r2
}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <LL_RCC_GetLPUARTClockSource>:
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800382c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003830:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4013      	ands	r3, r2
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e042      	b.n	80038da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fd f87a 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2224      	movs	r2, #36	; 0x24
 8003870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f82d 	bl	80038e4 <UART_SetConfig>
 800388a:	4603      	mov	r3, r0
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e022      	b.n	80038da <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 fa95 	bl	8003dcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0201 	orr.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fb1b 	bl	8003f0e <UART_CheckIdleState>
 80038d8:	4603      	mov	r3, r0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e8:	b08c      	sub	sp, #48	; 0x30
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	431a      	orrs	r2, r3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	4313      	orrs	r3, r2
 800390a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b94      	ldr	r3, [pc, #592]	; (8003b64 <UART_SetConfig+0x280>)
 8003914:	4013      	ands	r3, r2
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800391c:	430b      	orrs	r3, r1
 800391e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a89      	ldr	r2, [pc, #548]	; (8003b68 <UART_SetConfig+0x284>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800394c:	4313      	orrs	r3, r2
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800395a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003964:	430b      	orrs	r3, r1
 8003966:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	f023 010f 	bic.w	r1, r3, #15
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a7a      	ldr	r2, [pc, #488]	; (8003b6c <UART_SetConfig+0x288>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d127      	bne.n	80039d8 <UART_SetConfig+0xf4>
 8003988:	2003      	movs	r0, #3
 800398a:	f7ff ff39 	bl	8003800 <LL_RCC_GetUSARTClockSource>
 800398e:	4603      	mov	r3, r0
 8003990:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003994:	2b03      	cmp	r3, #3
 8003996:	d81b      	bhi.n	80039d0 <UART_SetConfig+0xec>
 8003998:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <UART_SetConfig+0xbc>)
 800399a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399e:	bf00      	nop
 80039a0:	080039b1 	.word	0x080039b1
 80039a4:	080039c1 	.word	0x080039c1
 80039a8:	080039b9 	.word	0x080039b9
 80039ac:	080039c9 	.word	0x080039c9
 80039b0:	2301      	movs	r3, #1
 80039b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b6:	e080      	b.n	8003aba <UART_SetConfig+0x1d6>
 80039b8:	2302      	movs	r3, #2
 80039ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039be:	e07c      	b.n	8003aba <UART_SetConfig+0x1d6>
 80039c0:	2304      	movs	r3, #4
 80039c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c6:	e078      	b.n	8003aba <UART_SetConfig+0x1d6>
 80039c8:	2308      	movs	r3, #8
 80039ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ce:	e074      	b.n	8003aba <UART_SetConfig+0x1d6>
 80039d0:	2310      	movs	r3, #16
 80039d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039d6:	e070      	b.n	8003aba <UART_SetConfig+0x1d6>
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a64      	ldr	r2, [pc, #400]	; (8003b70 <UART_SetConfig+0x28c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d138      	bne.n	8003a54 <UART_SetConfig+0x170>
 80039e2:	200c      	movs	r0, #12
 80039e4:	f7ff ff0c 	bl	8003800 <LL_RCC_GetUSARTClockSource>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80039ee:	2b0c      	cmp	r3, #12
 80039f0:	d82c      	bhi.n	8003a4c <UART_SetConfig+0x168>
 80039f2:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <UART_SetConfig+0x114>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a2d 	.word	0x08003a2d
 80039fc:	08003a4d 	.word	0x08003a4d
 8003a00:	08003a4d 	.word	0x08003a4d
 8003a04:	08003a4d 	.word	0x08003a4d
 8003a08:	08003a3d 	.word	0x08003a3d
 8003a0c:	08003a4d 	.word	0x08003a4d
 8003a10:	08003a4d 	.word	0x08003a4d
 8003a14:	08003a4d 	.word	0x08003a4d
 8003a18:	08003a35 	.word	0x08003a35
 8003a1c:	08003a4d 	.word	0x08003a4d
 8003a20:	08003a4d 	.word	0x08003a4d
 8003a24:	08003a4d 	.word	0x08003a4d
 8003a28:	08003a45 	.word	0x08003a45
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a32:	e042      	b.n	8003aba <UART_SetConfig+0x1d6>
 8003a34:	2302      	movs	r3, #2
 8003a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a3a:	e03e      	b.n	8003aba <UART_SetConfig+0x1d6>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a42:	e03a      	b.n	8003aba <UART_SetConfig+0x1d6>
 8003a44:	2308      	movs	r3, #8
 8003a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a4a:	e036      	b.n	8003aba <UART_SetConfig+0x1d6>
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a52:	e032      	b.n	8003aba <UART_SetConfig+0x1d6>
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a43      	ldr	r2, [pc, #268]	; (8003b68 <UART_SetConfig+0x284>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d12a      	bne.n	8003ab4 <UART_SetConfig+0x1d0>
 8003a5e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003a62:	f7ff fedf 	bl	8003824 <LL_RCC_GetLPUARTClockSource>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a6c:	d01a      	beq.n	8003aa4 <UART_SetConfig+0x1c0>
 8003a6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a72:	d81b      	bhi.n	8003aac <UART_SetConfig+0x1c8>
 8003a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a78:	d00c      	beq.n	8003a94 <UART_SetConfig+0x1b0>
 8003a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a7e:	d815      	bhi.n	8003aac <UART_SetConfig+0x1c8>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <UART_SetConfig+0x1a8>
 8003a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a88:	d008      	beq.n	8003a9c <UART_SetConfig+0x1b8>
 8003a8a:	e00f      	b.n	8003aac <UART_SetConfig+0x1c8>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a92:	e012      	b.n	8003aba <UART_SetConfig+0x1d6>
 8003a94:	2302      	movs	r3, #2
 8003a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a9a:	e00e      	b.n	8003aba <UART_SetConfig+0x1d6>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aa2:	e00a      	b.n	8003aba <UART_SetConfig+0x1d6>
 8003aa4:	2308      	movs	r3, #8
 8003aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aaa:	e006      	b.n	8003aba <UART_SetConfig+0x1d6>
 8003aac:	2310      	movs	r3, #16
 8003aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ab2:	e002      	b.n	8003aba <UART_SetConfig+0x1d6>
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a2a      	ldr	r2, [pc, #168]	; (8003b68 <UART_SetConfig+0x284>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	f040 80a4 	bne.w	8003c0e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ac6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d823      	bhi.n	8003b16 <UART_SetConfig+0x232>
 8003ace:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <UART_SetConfig+0x1f0>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003af9 	.word	0x08003af9
 8003ad8:	08003b17 	.word	0x08003b17
 8003adc:	08003b01 	.word	0x08003b01
 8003ae0:	08003b17 	.word	0x08003b17
 8003ae4:	08003b07 	.word	0x08003b07
 8003ae8:	08003b17 	.word	0x08003b17
 8003aec:	08003b17 	.word	0x08003b17
 8003af0:	08003b17 	.word	0x08003b17
 8003af4:	08003b0f 	.word	0x08003b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af8:	f7fe fdda 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 8003afc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003afe:	e010      	b.n	8003b22 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b00:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <UART_SetConfig+0x290>)
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b04:	e00d      	b.n	8003b22 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b06:	f7fe fd1f 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8003b0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b0c:	e009      	b.n	8003b22 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b14:	e005      	b.n	8003b22 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8137 	beq.w	8003d98 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	4a12      	ldr	r2, [pc, #72]	; (8003b78 <UART_SetConfig+0x294>)
 8003b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b34:	461a      	mov	r2, r3
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4413      	add	r3, r2
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d305      	bcc.n	8003b5a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d910      	bls.n	8003b7c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b60:	e11a      	b.n	8003d98 <UART_SetConfig+0x4b4>
 8003b62:	bf00      	nop
 8003b64:	cfff69f3 	.word	0xcfff69f3
 8003b68:	40008000 	.word	0x40008000
 8003b6c:	40013800 	.word	0x40013800
 8003b70:	40004400 	.word	0x40004400
 8003b74:	00f42400 	.word	0x00f42400
 8003b78:	08004468 	.word	0x08004468
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	2200      	movs	r2, #0
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	60fa      	str	r2, [r7, #12]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	4a8e      	ldr	r2, [pc, #568]	; (8003dc4 <UART_SetConfig+0x4e0>)
 8003b8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2200      	movs	r2, #0
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b9e:	f7fc faeb 	bl	8000178 <__aeabi_uldivmod>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	020b      	lsls	r3, r1, #8
 8003bb4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003bb8:	0202      	lsls	r2, r0, #8
 8003bba:	6979      	ldr	r1, [r7, #20]
 8003bbc:	6849      	ldr	r1, [r1, #4]
 8003bbe:	0849      	lsrs	r1, r1, #1
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	4605      	mov	r5, r0
 8003bc6:	eb12 0804 	adds.w	r8, r2, r4
 8003bca:	eb43 0905 	adc.w	r9, r3, r5
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	469a      	mov	sl, r3
 8003bd6:	4693      	mov	fp, r2
 8003bd8:	4652      	mov	r2, sl
 8003bda:	465b      	mov	r3, fp
 8003bdc:	4640      	mov	r0, r8
 8003bde:	4649      	mov	r1, r9
 8003be0:	f7fc faca 	bl	8000178 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4613      	mov	r3, r2
 8003bea:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bf2:	d308      	bcc.n	8003c06 <UART_SetConfig+0x322>
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bfa:	d204      	bcs.n	8003c06 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6a3a      	ldr	r2, [r7, #32]
 8003c02:	60da      	str	r2, [r3, #12]
 8003c04:	e0c8      	b.n	8003d98 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c0c:	e0c4      	b.n	8003d98 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c16:	d167      	bne.n	8003ce8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003c18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d828      	bhi.n	8003c72 <UART_SetConfig+0x38e>
 8003c20:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <UART_SetConfig+0x344>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003c4d 	.word	0x08003c4d
 8003c2c:	08003c55 	.word	0x08003c55
 8003c30:	08003c5d 	.word	0x08003c5d
 8003c34:	08003c73 	.word	0x08003c73
 8003c38:	08003c63 	.word	0x08003c63
 8003c3c:	08003c73 	.word	0x08003c73
 8003c40:	08003c73 	.word	0x08003c73
 8003c44:	08003c73 	.word	0x08003c73
 8003c48:	08003c6b 	.word	0x08003c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c4c:	f7fe fd30 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 8003c50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c52:	e014      	b.n	8003c7e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c54:	f7fe fd3e 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8003c58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c5a:	e010      	b.n	8003c7e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c5c:	4b5a      	ldr	r3, [pc, #360]	; (8003dc8 <UART_SetConfig+0x4e4>)
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c60:	e00d      	b.n	8003c7e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c62:	f7fe fc71 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8003c66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c68:	e009      	b.n	8003c7e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c70:	e005      	b.n	8003c7e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8089 	beq.w	8003d98 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	4a4e      	ldr	r2, [pc, #312]	; (8003dc4 <UART_SetConfig+0x4e0>)
 8003c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c90:	461a      	mov	r2, r3
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c98:	005a      	lsls	r2, r3, #1
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	085b      	lsrs	r3, r3, #1
 8003ca0:	441a      	add	r2, r3
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003caa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	2b0f      	cmp	r3, #15
 8003cb0:	d916      	bls.n	8003ce0 <UART_SetConfig+0x3fc>
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb8:	d212      	bcs.n	8003ce0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	f023 030f 	bic.w	r3, r3, #15
 8003cc2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	8bfb      	ldrh	r3, [r7, #30]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	8bfa      	ldrh	r2, [r7, #30]
 8003cdc:	60da      	str	r2, [r3, #12]
 8003cde:	e05b      	b.n	8003d98 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ce6:	e057      	b.n	8003d98 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ce8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d828      	bhi.n	8003d42 <UART_SetConfig+0x45e>
 8003cf0:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <UART_SetConfig+0x414>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d1d 	.word	0x08003d1d
 8003cfc:	08003d25 	.word	0x08003d25
 8003d00:	08003d2d 	.word	0x08003d2d
 8003d04:	08003d43 	.word	0x08003d43
 8003d08:	08003d33 	.word	0x08003d33
 8003d0c:	08003d43 	.word	0x08003d43
 8003d10:	08003d43 	.word	0x08003d43
 8003d14:	08003d43 	.word	0x08003d43
 8003d18:	08003d3b 	.word	0x08003d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d1c:	f7fe fcc8 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 8003d20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d22:	e014      	b.n	8003d4e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d24:	f7fe fcd6 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8003d28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d2a:	e010      	b.n	8003d4e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d2c:	4b26      	ldr	r3, [pc, #152]	; (8003dc8 <UART_SetConfig+0x4e4>)
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d30:	e00d      	b.n	8003d4e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d32:	f7fe fc09 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8003d36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d38:	e009      	b.n	8003d4e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d40:	e005      	b.n	8003d4e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d4c:	bf00      	nop
    }

    if (pclk != 0U)
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d021      	beq.n	8003d98 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	4a1a      	ldr	r2, [pc, #104]	; (8003dc4 <UART_SetConfig+0x4e0>)
 8003d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	085b      	lsrs	r3, r3, #1
 8003d6c:	441a      	add	r2, r3
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	2b0f      	cmp	r3, #15
 8003d7c:	d909      	bls.n	8003d92 <UART_SetConfig+0x4ae>
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d84:	d205      	bcs.n	8003d92 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60da      	str	r2, [r3, #12]
 8003d90:	e002      	b.n	8003d98 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2200      	movs	r2, #0
 8003dac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2200      	movs	r2, #0
 8003db2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003db4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3730      	adds	r7, #48	; 0x30
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc2:	bf00      	nop
 8003dc4:	08004468 	.word	0x08004468
 8003dc8:	00f42400 	.word	0x00f42400

08003dcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01a      	beq.n	8003ee2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eca:	d10a      	bne.n	8003ee2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	605a      	str	r2, [r3, #4]
  }
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr

08003f0e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b086      	sub	sp, #24
 8003f12:	af02      	add	r7, sp, #8
 8003f14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f1e:	f7fc ff73 	bl	8000e08 <HAL_GetTick>
 8003f22:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d10e      	bne.n	8003f50 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f832 	bl	8003faa <UART_WaitOnFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e028      	b.n	8003fa2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d10e      	bne.n	8003f7c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f81c 	bl	8003faa <UART_WaitOnFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e012      	b.n	8003fa2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b09c      	sub	sp, #112	; 0x70
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fba:	e0a9      	b.n	8004110 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	f000 80a5 	beq.w	8004110 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc6:	f7fc ff1f 	bl	8000e08 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d302      	bcc.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x32>
 8003fd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d140      	bne.n	800405e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ff0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ffc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004000:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004002:	e841 2300 	strex	r3, r2, [r1]
 8004006:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1e6      	bne.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3308      	adds	r3, #8
 8004014:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004018:	e853 3f00 	ldrex	r3, [r3]
 800401c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	663b      	str	r3, [r7, #96]	; 0x60
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3308      	adds	r3, #8
 800402c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800402e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004030:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004036:	e841 2300 	strex	r3, r2, [r1]
 800403a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800403c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1e5      	bne.n	800400e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e069      	b.n	8004132 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d051      	beq.n	8004110 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800407a:	d149      	bne.n	8004110 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004084:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800409a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a4:	637b      	str	r3, [r7, #52]	; 0x34
 80040a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ac:	e841 2300 	strex	r3, r2, [r1]
 80040b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e6      	bne.n	8004086 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3308      	adds	r3, #8
 80040be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	e853 3f00 	ldrex	r3, [r3]
 80040c6:	613b      	str	r3, [r7, #16]
   return(result);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f023 0301 	bic.w	r3, r3, #1
 80040ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3308      	adds	r3, #8
 80040d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040d8:	623a      	str	r2, [r7, #32]
 80040da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040dc:	69f9      	ldr	r1, [r7, #28]
 80040de:	6a3a      	ldr	r2, [r7, #32]
 80040e0:	e841 2300 	strex	r3, r2, [r1]
 80040e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e5      	bne.n	80040b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e010      	b.n	8004132 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69da      	ldr	r2, [r3, #28]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4013      	ands	r3, r2
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	429a      	cmp	r2, r3
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	429a      	cmp	r2, r3
 800412c:	f43f af46 	beq.w	8003fbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3770      	adds	r7, #112	; 0x70
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_UARTEx_DisableFifoMode+0x16>
 800414c:	2302      	movs	r3, #2
 800414e:	e027      	b.n	80041a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2224      	movs	r2, #36	; 0x24
 800415c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0201 	bic.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800417e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2220      	movs	r2, #32
 8004192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80041be:	2302      	movs	r3, #2
 80041c0:	e02d      	b.n	800421e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2224      	movs	r2, #36	; 0x24
 80041ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0201 	bic.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f850 	bl	80042a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800423a:	2302      	movs	r3, #2
 800423c:	e02d      	b.n	800429a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2224      	movs	r2, #36	; 0x24
 800424a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f812 	bl	80042a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d108      	bne.n	80042c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80042c4:	e031      	b.n	800432a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042c6:	2308      	movs	r3, #8
 80042c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042ca:	2308      	movs	r3, #8
 80042cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	0e5b      	lsrs	r3, r3, #25
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	0f5b      	lsrs	r3, r3, #29
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042ee:	7bbb      	ldrb	r3, [r7, #14]
 80042f0:	7b3a      	ldrb	r2, [r7, #12]
 80042f2:	4910      	ldr	r1, [pc, #64]	; (8004334 <UARTEx_SetNbDataToProcess+0x90>)
 80042f4:	5c8a      	ldrb	r2, [r1, r2]
 80042f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80042fa:	7b3a      	ldrb	r2, [r7, #12]
 80042fc:	490e      	ldr	r1, [pc, #56]	; (8004338 <UARTEx_SetNbDataToProcess+0x94>)
 80042fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004300:	fb93 f3f2 	sdiv	r3, r3, r2
 8004304:	b29a      	uxth	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	7b7a      	ldrb	r2, [r7, #13]
 8004310:	4908      	ldr	r1, [pc, #32]	; (8004334 <UARTEx_SetNbDataToProcess+0x90>)
 8004312:	5c8a      	ldrb	r2, [r1, r2]
 8004314:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004318:	7b7a      	ldrb	r2, [r7, #13]
 800431a:	4907      	ldr	r1, [pc, #28]	; (8004338 <UARTEx_SetNbDataToProcess+0x94>)
 800431c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800431e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004322:	b29a      	uxth	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800432a:	bf00      	nop
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	08004480 	.word	0x08004480
 8004338:	08004488 	.word	0x08004488

0800433c <memset>:
 800433c:	4402      	add	r2, r0
 800433e:	4603      	mov	r3, r0
 8004340:	4293      	cmp	r3, r2
 8004342:	d100      	bne.n	8004346 <memset+0xa>
 8004344:	4770      	bx	lr
 8004346:	f803 1b01 	strb.w	r1, [r3], #1
 800434a:	e7f9      	b.n	8004340 <memset+0x4>

0800434c <__libc_init_array>:
 800434c:	b570      	push	{r4, r5, r6, lr}
 800434e:	4d0d      	ldr	r5, [pc, #52]	; (8004384 <__libc_init_array+0x38>)
 8004350:	4c0d      	ldr	r4, [pc, #52]	; (8004388 <__libc_init_array+0x3c>)
 8004352:	1b64      	subs	r4, r4, r5
 8004354:	10a4      	asrs	r4, r4, #2
 8004356:	2600      	movs	r6, #0
 8004358:	42a6      	cmp	r6, r4
 800435a:	d109      	bne.n	8004370 <__libc_init_array+0x24>
 800435c:	4d0b      	ldr	r5, [pc, #44]	; (800438c <__libc_init_array+0x40>)
 800435e:	4c0c      	ldr	r4, [pc, #48]	; (8004390 <__libc_init_array+0x44>)
 8004360:	f000 f818 	bl	8004394 <_init>
 8004364:	1b64      	subs	r4, r4, r5
 8004366:	10a4      	asrs	r4, r4, #2
 8004368:	2600      	movs	r6, #0
 800436a:	42a6      	cmp	r6, r4
 800436c:	d105      	bne.n	800437a <__libc_init_array+0x2e>
 800436e:	bd70      	pop	{r4, r5, r6, pc}
 8004370:	f855 3b04 	ldr.w	r3, [r5], #4
 8004374:	4798      	blx	r3
 8004376:	3601      	adds	r6, #1
 8004378:	e7ee      	b.n	8004358 <__libc_init_array+0xc>
 800437a:	f855 3b04 	ldr.w	r3, [r5], #4
 800437e:	4798      	blx	r3
 8004380:	3601      	adds	r6, #1
 8004382:	e7f2      	b.n	800436a <__libc_init_array+0x1e>
 8004384:	08004498 	.word	0x08004498
 8004388:	08004498 	.word	0x08004498
 800438c:	08004498 	.word	0x08004498
 8004390:	0800449c 	.word	0x0800449c

08004394 <_init>:
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004396:	bf00      	nop
 8004398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439a:	bc08      	pop	{r3}
 800439c:	469e      	mov	lr, r3
 800439e:	4770      	bx	lr

080043a0 <_fini>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	bf00      	nop
 80043a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a6:	bc08      	pop	{r3}
 80043a8:	469e      	mov	lr, r3
 80043aa:	4770      	bx	lr
